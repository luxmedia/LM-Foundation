// Foundation by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

@require '_global'
@require '_buttons'

//
// @Variables
//

$include-html-button-classes =              com_css.BUTTONGROUPS

// Sets the margin for the right side by default, and the left margin if right-to-left direction is used
$button-bar-margin-opposite ?=               rem-calc(10)
$button-group-border-width ?=                1px
$button-group-border-color ?=                $white // $button-border-color

//
// Button Group Mixins
//

// We use this to add styles for a button group container
button-group-container($styles = true, $float = false) {
    if $styles {
        list-style: none
        margin: 0
        {$default-float}: 0
        clearfix()
    }
    if $float {
        float: $default-float
        margin-{$opposite-direction}: $button-bar-margin-opposite
        div {
            overflow: hidden
        }
    }
    if (!$ie8 && !$float) {
        // Eleminates whitespace before and behind li's
        // WARNING: Requires children to have a font-size definition (gt 0)!
        font-size: 0
    }
}

// We use this to control styles for button groups
button-group-style($styles = true, $radius = false, $even = false, $float = false, $orientation = horizontal) {

    if $styles {
        // Apply separating border for inner buttons only (not first button)
        &:not(:first-child) {
            > button,
            .btn {
                border-{$default-float}: $button-group-border-width solid
                border-{$default-float}-color: $button-group-border-color
            }
        }

        // Control the flow, or remove those styles completely.
        if $float {
            display: list-item
            float: $float
            margin: 0

            // Make sure the first child doesn't get the negative margin.
            &:first-child {
                margin-{$default-float}: 0
            }
        } else {
            if $ie8 {
                // correct spacing between items
                margin-{$default-float}: -2px
                margin-{$opposite-direction}: -2px
                
                &:first-child {
                    margin-{$default-float}: 0
                }
            }
            display: inline-block
        }

        if ($orientation == vertical) {
            display: block
            margin: 0

            > button,
            .btn {
                // Reset left border. But only if normal buttons have no borders!
                if ($button-border-width == false) {
                    border-left-width: 0
                }
                display: block
                margin: 0
            }
            // Apply separating border for inner buttons only (not first button)
            &:not(:first-child) {
                > button,
                .btn {
                    border-top-color: $button-group-border-color
                    border-top: $button-group-border-width solid
                }
            }

            > button {
                width: 100%
            }
            
        }

        // Control left and right radius on first/last buttons in the group.
        if ($radius == true) {
            &,
            > a,
            > button,
            > .btn {
                radius(0)
            }
            &:first-child,
            &:first-child > a,
            &:first-child > button,
            &:first-child > .btn {
                if ($orientation == vertical) {
                    side-radius(top, $button-radius)
                    side-radius(bottom, 0)
                }
                else {
                    side-radius($default-float, $button-radius)
                    side-radius($opposite-direction, 0)
                }
            }
            &:last-child,
            &:last-child > a,
            &:last-child > button,
            &:last-child > .btn {
                if ($orientation == vertical) {
                    side-radius(bottom, $button-radius)
                    side-radius(top, 0)
                }
                else {
                    side-radius($opposite-direction, $button-radius)
                    side-radius($default-float, 0)
                }
            }
        } else if $radius {
            &,
            > a,
            > button,
            > .btn {
                radius(0)
            }
            &:first-child,
            &:first-child > a,
            &:first-child > button,
            &:first-child > .btn {
                if ($orientation == vertical) {
                    side-radius(top, $radius)
                    side-radius(bottom, 0)
                } else {
                    side-radius($default-float, $radius)
                    side-radius($opposite-direction, 0)
                }
            }
            &:last-child,
            &:last-child > a,
            &:last-child > button,
            &:last-child > .btn {
                if ($orientation == vertical) {
                    side-radius(bottom, $radius)
                    side-radius(top, 0)
                } else {
                    side-radius($opposite-direction, $radius)
                    side-radius($default-float, 0)
                }
            }
        }
    }

    // We use this to make the buttons even width across their container
    if $even {
        width: percentage((100/$even) / 100)
        button,
        .btn {
            width: 100%
        }
    }
}

// Button corner style mixin
button-group-corner-style($rad = false, $sml-rad = false) {
    // Base item style
    > li {
        if $rad {
            // radius/round style
            button-group-style($radius:$rad, $float:null)
        } else {
            // normal style
            button-group-style()
        }
    }

    // Stacked
    &--stack > li {
        button-group-style($radius:$rad, $float:null, $orientation:vertical)
        float: none
    }
    &--stack-for-sml > li {
        if $rad {
            // radius/round style
            +mediaquery($medium-up) {
                button-group-style($radius:$rad, $orientation:horizontal)
            }
        } else {
            // normal style
            button-group-style($orientation:horizontal)
        }
        // common style
        +mediaquery($small-only) {
            button-group-style($radius:$sml-rad, $orientation:vertical)
            width: 100%
        }
    }
}


//
// @styles
//

if $include-html-button-classes {

    .btn-group {
        button-group-container()

        // symmetric btn columns
        for $i in 2..8 {
            &.even-{$i} li {
                button-group-style($styles:false, $even:$i, $float:null)
            }
        }

        // Include styles based on corner variant
        if ($button-corner-style == 'radius') {
            button-group-corner-style($rad:$button-radius, $sml-rad:$button-radius)
        } else if ($button-corner-style == 'round') {
            button-group-corner-style($rad:$button-round, $sml-rad:$button-med)
        } else {
            button-group-corner-style()
        }

        // Add corner variant styles
        if ($button-corner-style == 'all') {
            &--rad > li {
                button-group-style($radius:$button-radius, $float:null)
            }
            &--rad.btn-group--stack > li {
                button-group-style($radius:$button-radius, $float:null, $orientation:vertical)
            }
            &--rad.btn-group--stack-for-sml > li {
                +mediaquery($medium-up) {
                    button-group-style($radius:$button-radius, $orientation:horizontal)
                }
                +mediaquery($small-only) {
                    button-group-style($radius:$button-radius, $orientation:vertical)
                }
            }

            &--rnd > li {
                button-group-style($radius:$button-round, $float:null)
            }
            &--rnd.btn-group--stack > li {
                button-group-style($radius:$button-med, $float:null, $orientation:vertical)
            }
            &--rnd.btn-group--stack-for-sml > li {
                +mediaquery($medium-up) {
                    button-group-style($radius:$button-round, $orientation:horizontal)
                }
                +mediaquery($small-only) {
                    button-group-style($radius:$button-med, $orientation:vertical)
                }
            }
        }

        // style separating border for outline-style button-groups
        if $button-outline-width {
            &--outline > li:not(:first-child) {
                > button,
                .btn {
                    border-{$default-float}-color: transparent
                    // margin-{$default-float}: -($button-outline-width)
                    // position: relative
                }
            }
        }

    }

    // Button bar
    .btn-bar {
        clearfix()
        .btn-group {
            button-group-container($styles:false, $float:true)
        }
    }
}