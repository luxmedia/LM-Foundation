// Foundation by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

@require '../_functions'

//
// @variables
//

$namespace ?=                       false

// The $base-font-size is 100% while $base-line-height is 140% // (20/14)
$base-line-height ?=                 1.428571429 // 140%
// non-relative value of line-height (if above is percent)
$base-line-height-abs ?=             $base-line-height // unit(($base-line-height/100), '')
// Computed "line-height" (`font-size` * `line-height`) for use with `margin`, `padding`, etc.
$base-line-height-computed ?=       floor(($rem-base-actual * $base-line-height)) // ~20px

// whether or not CSS classes come through in the gem files.
$include-html-classes ?=             true
$include-print-styles ?=             true
$include-js-meta-styles ?=           true // Warning! Meta styles are a dependancy of the Javascript.
$include-html-global-classes ?=      com_css.GLOBAL
$include-primary-2-color-styles ?=   base_params.include_primary_2_styles

// =========================================================================
// Folder
// =========================================================================

$base-http ?=                       base_params.httpurl

$base-path-src ?=                    ('./' + base_params.src)
$base-path-svg ?=                    $base-path-src+'/svg'
$base-path-png ?=                    $base-path-src+'/png'
$base-path-dist ?=                   ('./' + base_params.dist)
$dir_img ?=                          $base-path-src + '/img'
$dir_font ?=                         $base-path-dist + '/fonts'

$relative-paths ?=                   true


// =========================================================================
// c. Global
// =========================================================================

// define default font stacks
$font-family-sans-serif ?=           'Open Sans', 'Lucida Sans', Helvetica, Arial, sans-serif
$font-family-serif ?=                Georgia, Cambria, 'Times New Roman', Times, serif
$font-family-monospace ?=            Consolas, 'Menlo', 'Liberation Mono', Courier, monospace
$font-family-headings ?=             $font-family-sans-serif
$font-family-custom ?=               $font-family-sans-serif
$font-family-custom-fallback ?=      $font-family-sans-serif
$font-custom-spacing ?=              1px

// define default font weights
$font-weight-normal ?=               normal
$font-weight-bold ?=                 bold

// Gray Base should have a luminance about 50%
$gray-base ?=                        base_colors.medium

$white ?=                            base_colors.light
$gray-lighter-1 ?=                   #FAFAFA
$gray-lighter-2 ?=                   #F9F9F9
$gray-lighter-3 ?=                   #F6F6F6
$gray-light-1 ?=                     #F5F5F5
$gray-light-2 ?=                     #EFEFEF
$gray-light-3 ?=                     #EEEEEE
$gray-medium-1 ?=                    #DDDDDD
$gray-medium-2 ?=                    #CCCCCC
$gray-dark-1 ?=                      #999999
$gray-dark-2 ?=                      #888888
$gray-dark-3 ?=                      #777777
$gray-darker-1 ?=                    #666666
$gray-darker-2 ?=                    #555555
$gray-darker-3 ?=                    #444444
$charcoal-1 ?=                       #333333
$charcoal-2 ?=                       #222222
$black ?=                            base_colors.dark

// We use these as default colors throughout
$primary-color ?=                    base_colors.primary
// if corporate color scope includes a second primary color, you can define it here
$primary-2-color ?=                  base_colors.primary-2

// Secondary color should be a neutral color
$secondary-color ?=                  lightness($gray-base, 50%)

$info-color ?=                       #62a7d9 // #a0d3e8
$success-color ?=                    #4fc497 // #43AC6A
$warning-color ?=                    #ffcd45 // #f08a24
$alert-color ?=                      #f09060 // #f04124
$critical-color ?=                   $alert-color

$warning-font-color ?=               #e45a5a // #f08a24
$critical-font-color ?=              #c52121 // #f04124

// various global styles
$body-bg ?=                          $white
$body-font-color ?=                  $charcoal-2
$body-font-family ?=                 $font-family-sans-serif
$body-font-weight ?=                 $font-weight-normal
$body-font-style ?=                  normal

// font-smoothing
$font-smoothing ?=                   antialiased

// focus shadow
$focus-shadow ?=                     0 0 10px $primary-color

// text direction settings
$text-direction ?=                   ltr
$opposite-direction ?=               right
$default-float ?=                    left
$last-child-float ?=                 $opposite-direction

// make sure border radius matches unless we want it different.
$global-radius ?=                    3px
$global-rounded ?=                   1000px
$global-blur-radius ?=               3px
$global-ui-shadow ?=                 1px 1px 1px rgba($black, .2)

// inset shadow shiny edges and depressions.
$shiny-edge-size ?=                  0 1px 0
$shiny-edge-color ?=                 rgba($white, .5)
$shiny-edge-active-color ?=          rgba($black, .2)

// SVGs
$svg-stroke-width-tiny ?=            6 // Stroke width for linea svgs
$svg-stroke-width-small ?=           5
$svg-stroke-width-medium ?=          4
$svg-stroke-width-large ?=           3
$svg-icons-base-size ?=              rem-calc(16) // base icon size
$svg-scale-factor-uni ?=             0.2 // rem-based - is added to background-size value to make bg-icons a bit bigger
$svg-scale-factor-x ?=               2 // multiply the svg width with this factor to get a pseudo padding for better icon alignment
$svg-scale-factor-y ?=               1 // multiply the svg height with this factor to get a pseudo padding for better icon alignment

// Transitions
$transition-default-speed ?=        .24s

// =========================================================================
// d. Media Query Ranges
// =========================================================================
//## Define the breakpoints at which your layout will change, adapting to different screen sizes.

// Upper bounds
// Small screen / phone
$small-breakpoint-px ?=             480 // 640
$small-breakpoint ?=                em-calc($small-breakpoint-px)
$small-min ?=                       $small-breakpoint

// Medium screen / tablet
$medium-breakpoint-px ?=            768 // 1024
$medium-breakpoint ?=               em-calc($medium-breakpoint-px)
$medium-min ?=                      $medium-breakpoint

// Large screen / desktop or tablet-landscape
$large-breakpoint-px ?=             992 // 1440
$large-breakpoint ?=                em-calc($large-breakpoint-px)
$large-min ?=                       $large-breakpoint

// XLarge screen / wide desktop
$xlarge-breakpoint-px ?=            1200
$xlarge-breakpoint ?=               em-calc($xlarge-breakpoint-px)
$xlarge-min ?=                      $xlarge-breakpoint

// XXLarge screen / extra wide desktop
$xxlarge-breakpoint-px ?=            1440
$xxlarge-breakpoint ?=               em-calc($xxlarge-breakpoint-px)
$xxlarge-min ?=                      $xxlarge-breakpoint

// So media queries don't overlap when required, provide a maximum
$small-max ?=                       ($medium-min - em-calc(1))
$medium-max ?=                      ($large-min - em-calc(1))
$large-max ?=                       ($xlarge-min - em-calc(1))
$xlarge-max ?=                      ($xxlarge-min - em-calc(1))
$xxlarge-max ?=                     em-calc(99999999)

// DEPRECATED
$small-range ?=                     (0 $small-max)
$medium-range ?=                    ($medium-min $medium-max)
$large-range ?=                     ($large-min $large-max) 
$xlarge-range ?=                    ($xlarge-min $large-max)
$xxlarge-range ?=                   ($xxlarge-min $xxlarge-max)


$screen ?=                          'only screen'

$landscape ?=                       $screen + ' and (orientation: landscape)'
$portrait ?=                        $screen + ' and (orientation: portrait)'

$small-up ?=                        $screen
$small-only ?=                      $screen + ' and (max-width:' + $small-max + ')'

$medium-up ?=                       $screen + ' and (min-width:' + $medium-min + ')'
$medium-only ?=                     $screen + ' and (min-width:' + $medium-min + ') and (max-width:' + $medium-max + ')'

$large-up ?=                        $screen + ' and (min-width:' + $large-min + ')'
$large-only ?=                      $screen + ' and (min-width:' + $large-min + ') and (max-width:' + $large-max + ')'

$xlarge-up ?=                       $screen + ' and (min-width:' + $xlarge-min + ')'
$xlarge-only ?=                     $screen + ' and (min-width:' + $xlarge-min + ') and (max-width:' + $xlarge-max + ')'

$xxlarge-up ?=                      $screen + ' and (min-width:' + $xxlarge-min + ')'
$xxlarge-only ?=                    $screen + ' and (min-width:' + $xxlarge-min + ') and (max-width:' + $xxlarge-max + ')'

$retina ?=                          ($screen + ' and (-webkit-min-device-pixel-ratio: 2),' $screen+' and (min--moz-device-pixel-ratio: 2),' $screen+' and (-o-min-device-pixel-ratio: 2/1),' $screen+' and (min-device-pixel-ratio: 2),' $screen+' and (min-resolution: 192dpi),' $screen+' and (min-resolution: 2dppx)')

// DEPRECATED / legacy
$small ?=                            $small-up
$medium ?=                           $medium-up
$large ?=                            $large-up


// =========================================================================
// b. Grid
// =========================================================================

// Foundation grid vars
$include-html-grid-classes ?=        $include-html-classes
$include-xl-html-grid-classes ?=     true

$total-columns ?=                    12
$column-gutter ?=                    rem-calc(20)

// DEPRECATED - max row width is defined by breakpoints!
// $row-width ?=                        (rem-calc($values:$xlarge-breakpoint-px, $base-value:$browser-default-font-size) - $column-gutter) // rem-calc(1140)
$row-width ?=                        (rem-calc($values:$xlarge-breakpoint-px) - $column-gutter)

// We use this as cursors values for enabling the option of having custom cursors in the whole site's stylesheet
// https://developer.mozilla.org/en-US/docs/Web/CSS/cursor
$cursor-auto-value ?=               auto
$cursor-crosshair-value ?=          crosshair
$cursor-default-value ?=            default
$cursor-disabled-value ?=           not-allowed
$cursor-pointer-value ?=            pointer
$cursor-help-value ?=               help
$cursor-text-value ?=               text
$cursor-zoom-in-value ?=            zoom-in
$cursor-zoom-out-value ?=           zoom-out
$cursor-grab-value ?=               grab
$cursor-grabbing-value ?=           grabbing

// f. Browser Capabilities
// =========================================================================

// Check if browser is capable of (requires modernizr):
// fontface
$is-fontface-support ?=                  unquote('/html.fontface')
$is-no-fontface-support ?=               unquote('/html.no-fontface')
// svg
$is-svg-support ?=                       unquote('/html.svg')
$is-no-svg-support ?=                    unquote('/html.no-svg')
// rem
$is-remunit-support ?=                   unquote('/html.cssremunit')
$is-no-remunit-support ?=                unquote('/html.no-cssremunit')


// g. Z-Index Ordering
// =========================================================================
$zindex-topbar ?=                        99
$zindex-joyride-tip ?=                   101
$zindex-navbar ?=                        1000
$zindex-dropdown ?=                      1001
$zindex-popover ?=                       1060
$zindex-tooltip ?=                       1070
$zindex-navbar-fixed ?=                  1030
$zindex-magellan-fixed ?=                1031
$zindex-modal ?=                         1040
$zindex-off-canvas-menu ?=               1002
$zindex-offcanvas ?=                     1050
$zindex-reveal ?=                        1060




//
// Global Foundation Mixins
//

// @mixins
//


// Control mediaquery fallback for ie8
// All media-queries should be created with this mixin!
mediaquery($bp = false) {
    if (!$ie8 && $bp) {
        @media $bp {
            {block}
        }
    } else if !$ie8 {
        {block}
    }
}

// control border radius.
// $radius - Default: $global-radius || 4px
radius($radius = $global-radius) {
    border-radius: $radius
}

// create equal side border radius on elements.
// $side - Options: left, right, top, bottom
side-radius($side, $radius = $global-radius) {
    if ($side == left || $side == right) {
        -webkit-border-bottom-{$side}-radius: $radius
        -webkit-border-top-{$side}-radius: $radius
        border-bottom-{$side}-radius: $radius
        border-top-{$side}-radius: $radius
    } else {
        -webkit-{$side}-left-radius: $radius
        -webkit-{$side}-right-radius: $radius
        border-{$side}-left-radius: $radius
        border-{$side}-right-radius: $radius
    }
}

// control whether or not we have inset shadows edges.
// $active - Default: true, Options: false
inset-shadow($active = true) {
    box-shadow: $shiny-edge-size $shiny-edge-color inset

    if $active {
        &:active {
            box-shadow: $shiny-edge-size $shiny-edge-active-color inset
        }
    }
}

// Make item full width
expand() {
    display: block
    padding-left: 0
    padding-right: 0
    width: 100%
    
    table& {
        display: table
    }
}

// Remove transition flicker on phones
kill-flicker() {
    // -webkit-transform: translateZ(0x)
    -webkit-backface-visibility: hidden
    backface-visibility: hidden
}

// CSS Blur filter
blur-filter($radius = $global-blur-radius) {
    if $radius {
        -webkit-filter: blur($radius)
        -moz-filter: blur($radius)
        filter: blur($radius)
    }
}


// =========================================================================
// COLOR MIXINS
// =========================================================================

// scale color
scale-color($value = false, $factor = false) {
    if ($value && $factor) {
        if ($value != transparent) {
            if ($scale-factor > 0%) {
                return lighten($value, $factor)
            } else {
                return darken($value, -($factor))
            }
        } else {
            return $value
        }
    }
}
// CSS grayscale filter
filter-grayscale($value = 100%, $reset = false) {
    if $value {
        filter: grayscale($value)
        -webkit-filter: grayscale($value)
        -moz-filter: grayscale($value)
        -ms-filter: grayscale($value)
        -o-filter: grayscale($value)
        if $reset {
            filter: none
        }
    }
}

// Return color with alpha-channel and an opaque fallback
color_alpha($property, $color = $black, $opacity = false, $bg = $white) {
    if ($opacity && $opacity != 1) {
        /.ie8 & {
            {$property}: blend(rgba($color, $opacity), $bg); // ie8 only
        }
        /.rgba & {
            {$property}: rgba($color, $opacity); // modern browsers
        }
    } else {
        {$property}: rgb($maincolor);
    }
}

// Return rgb-color-value
color_rgb(value) {
    if (value && value != none && value != transparent) {
        return rgb(value)
    } else {
        return value
    }
}

// Border parameters
border-longhand($width = 0, $style = solid, $color = transparent) {
    border-width: $width
    border-style: $style
    border-color: $color
}

find_similar_basecolor($color = false) {
    if ($color != false && $color != none) {
        if ( $color == $primary-color) {
            return 'primary'
        } else if ( $color == $primary-2-color) {
            return 'primary-2'
        } else if ( $color == $secondary-color) {
            return 'secondary'
        } else if (lightness($color) > 75%) {
            return 'light'
        } else if (lightness($color) < 25%) {
            return 'dark'
        } else {
            return 'medium'
        }
    } else {
        return false
    }
}

// SVG backgrounds based on "svg-stylus" plugin
svg-background($path = $base-path-svg, $file = false, $properties = false, $shapes = all, $fill = none, $stroke = false, $fill-hover = none, $stroke-hover = false, $stroke-width = 0, $size = $svg-icons-base-size, $scale-x = $svg-scale-factor-x, $scale-y = $svg-scale-factor-y, $scale-uni = $svg-scale-factor-uni, $repeat = no-repeat, $position-x = $opposite-direction, $position-y = center) {
    // possible svg shapes
    // If your svg files feature <g> you could use this instead of "all"
    // "g" is the svg group selector which inherits its styling to all children
    $svg-shapes-all = ('path' 'circle' 'ellipse' 'rect' 'line' 'polyline' 'polygon' 'text')

    if ($shapes == all) {
        $shapes = $svg-shapes-all
    }
    // placeholder for final params
    $svg-params-normal-state = ()
    $svg-params-hover-state = ()

    if $file {
        $path-to-file = !$ie8 ? ($path+'/'+$file) : ($base-path-png+'/'+$file)

        // Render SVG background if NOT ie8-flag
        if !$ie8 {
            // set styles (normal and hover) for all possible shapes
            for $shape in $shapes {
                if $stroke {
                    $params-normal = ($shape+' fill '+color_rgb($fill)+', '+$shape+' stroke '+color_rgb($stroke)+', '+$shape+' stroke-width '+$stroke-width)
                    push($svg-params-normal-state, $params-normal)
                }
                if $stroke-hover {
                    $params-hover = ($shape+' fill '+color_rgb($fill-hover)+', '+$shape+' stroke '+color_rgb($stroke-hover)+', '+$shape+' stroke-width '+$stroke-width)
                    push($svg-params-hover-state, $params-hover)
                }
            }

            // set background image
            if $properties {
                background-image: svgurl($path-to-file) svg($properties)
            } else {
                if $stroke {
                    background-image: svgurl($path-to-file) svg(unquote(join(', ', $svg-params-normal-state)))
                }
                // Additional Styling for Hover State
                if ($stroke-hover && ($stroke-hover != $stroke)) {
                    &:focus,
                    &:hover {
                        background-image: svgurl($path-to-file) svg(unquote(join(', ', $svg-params-hover-state)))
                    }
                }
            }
        // Render PNG background if ie8-flag is set
        } else {
            if find_similar_basecolor($fill) {
                $pngfile = ($path-to-file + '-' + find_similar_basecolor($fill) + '.png')
            } else if find_similar_basecolor($stroke) {
                $pngfile = ($path-to-file + '-' + find_similar_basecolor($stroke) + '.png')
            } else {
                $pngfile = false
            }
            if $pngfile {
                background-image: url($pngfile)
            }
            // TODO: Implement ie8 stroke-hover bg and minimize if's
        }
    }
    // sizing parameter
    if ($size && !$ie8) {
        $size = remify($size)
        background-size: ($size*$scale-x + $scale-uni) ($size*$scale-y + $scale-uni)
    }
    // position parameter
    if $position-x {
        background-position: $position-x $position-y
    }
    // repeat parameter
    if $repeat {
        background-repeat: $repeat
    }

}


// add transitions to elements
// $property - Default: all, Options: http://www.w3.org/TR/css3-transitions/#animatable-properties
// $speed - Default: 300ms
// $ease - Default:ease-out, Options: http://css-tricks.com/almanac/properties/t/transition-timing-function/
single-transition($property = all, $speed = $transition-default-speed, $ease = false) {
    $trans = ()
    for $prop in $property {
        if $ease {
            push($trans, join(' ', ($prop $speed $ease)))
        } else {
            push($trans, join(' ', ($prop $speed)))
        }
    }
    transition: unquote(join(', ', $trans))
    // transition($property, $speed, $ease)
}

// We use this to add single or multiple transitions to elements
// $property - Default: all, Options: http://www.w3.org/TR/css3-transitions/#animatable-properties
// $speed - Default: 300ms
// $ease - Default: ease-out, Options: http://css-tricks.com/almanac/properties/t/transition-timing-function/
// $delay - Default: null (0s)
// transition($property = all, $speed = $transition-default-speed, $ease = ease-out, $delay = null) {
//     $transition = none

//     if (length($property) > 1) {

//         for $transition_list in $property {

//             $len = length($transition_list)

//             for $i in 1..$len {

//                 if ($i == 1) {
//                     $_property = $transition_list[$i]
//                 }

//                 if ($len > 1) {
//                     if ($i == 2) {
//                         $_speed = $transition_list[$i]
//                     }
//                 } else {
//                     $_speed = $speed
//                 }

//                 if ($len > 2) {
//                     if ($i == 3) {
//                         $_ease = $transition_list[$i]
//                     }
//                 } else {
//                     $_ease = $ease
//                 }

//                 if ($len > 3) {
//                     if ($i == 4) {
//                         $_delay = $transition_list[$i]
//                     }
//                 } else {
//                     $_delay = $delay
//                 }
//             }

//             if ($transition == none) {
//                 $transition = ($_property $_speed $_ease $_delay)
//             } else {
//                 $transition = ($transition, $_property $_speed $_ease $_delay)
//             }
//         }

//     } else {

//         for $prop in $property {

//             if ($transition == none) {
//                 $transition = ($prop $speed $ease $delay)
//             } else {
//                 $transition = ($transition, $prop $speed $ease $delay)
//             }
//         }
//     }

//     transition: $transition
// }

// add box-sizing across browser prefixes
box-sizing($type = border-box) {
    -webkit-box-sizing: $type // Android < 2.3, iOS < 4
    -moz-box-sizing: $type // Firefox < 29
    box-sizing: $type // Chrome, IE 8+, Opera, Safari 5.1
}

// create isosceles triangles
// $triangle-size - Used to set border-size. No default, set a px or em size.
// $triangle-color - Used to set border-color which makes up triangle. No default
// $triangle-direction - Used to determine which direction triangle points. Options: top, bottom, left, right
css-triangle($triangle-size, $triangle-color, $triangle-direction) {
    border: inset $triangle-size
    content: ''
    display: block
    height: 0
    width: 0
    if ($triangle-direction == top) {
        border-color: $triangle-color transparent transparent transparent
        border-top-style: solid
    }
    if ($triangle-direction == bottom) {
        border-color: transparent transparent $triangle-color transparent
        border-bottom-style: solid
    }
    if ($triangle-direction == left) {
        border-color: transparent transparent transparent $triangle-color
        border-left-style: solid
    }
    if ($triangle-direction == right) {
        border-color: transparent $triangle-color transparent transparent
        border-right-style: solid
    }
}

// create the icon with three lines aka the hamburger icon, the menu-icon or the navicon
// $width - Width of hamburger icon in rem
// $left - If false, icon will be centered horizontally || explicitly set value in rem
// $top - If false, icon will be centered vertically || explicitly set value in rem
// $thickness - thickness of lines in hamburger icon, set value in px
// $gap - spacing between the lines in hamburger icon, set value in px
// $color - icon color
// $hover-color - icon color during hover
// $offcanvas - Set to true of @include in offcanvas
hamburger($width, $left, $top, $thickness, $gap, $color, $hover-color, $offcanvas) {
    span::after {
        content: ''
        display: block
        height: 0
        position: absolute

        if $offcanvas {
            if $top {
                top: $top
            } else {
                top: 50%
                margin-top: -($width/2)
            }
            if $left {
                left: $left
            } else {
                left: (($tabbar-menu-icon-width - $width) / 2)
            }
        } else {
            margin-top: -($width/2)
            top: 50%
            {$opposite-direction}: $topbar-link-padding
        }

        box-shadow: 0 0 0 $thickness $color, 0 ($gap + $thickness) 0 $thickness $color, 0 ((2 * $gap) + (2 * $thickness)) 0 $thickness $color
        width: $width
    }
    span:hover:after {
        box-shadow: 0 0 0 $thickness $hover-color, 0 ($gap + $thickness) 0 $thickness $hover-color, 0 ((2 * $gap) + (2 * $thickness)) 0 $thickness $hover-color
    }
}

// clear floats
clearfix() {
    &:before,
    &:after {
        content: ' ';
        display: table
    }
    &:after {
        clear: both
    }
}

// Force smooth font rendering
antialiased() {
    -webkit-font-smoothing: antialiased
    -moz-osx-font-smoothing: grayscale
}

// add a glowing effect to block elements
// $selector - Used for selector state. Default: focus, Options: hover, active, visited
// $fade-time - Default: 300ms
// $glowing-effect-color - Default: fade-out($primary-color, .25)
block-glowing-effect($selector = focus, $fade-time = 300ms, $glowing-effect-color = fade-out($primary-color, .25)) {
    transition: box-shadow $fade-time, border-color $fade-time ease-in-out

    &:{$selector} {
        border-color: $glowing-effect-color
        box-shadow: 0 0 5px $glowing-effect-color
    }
}

// translate elements in 2D
// $horizontal: Default: 0
// $vertical: Default: 0
translate2d($horizontal = 0, $vertical = 0) {
    transform: translate($horizontal, $vertical)
}

// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
element-invisible() {
    clip: rect(1px, 1px, 1px, 1px)
    height: 1px
    overflow: hidden
    position: absolute !important
    width: 1px
}

// Turns off the element-invisible effect.
element-invisible-off() {
    clip: auto
    height: auto
    overflow: visible
    position: static !important
    width: auto
}

// Set reading direction
if ($text-direction == ltr) {
    $default-float = left
    $opposite-direction = right
} else {
    $default-float = right
    $opposite-direction = left
}


// LUXMEDIA MOD
// =========================================================================
// FONT MIXINS
// =========================================================================


// Convert font-size to rem
// @DEPRECATED - We use fontsize() in _functions.styl instead
font_size(value) {
    font-size: fontsize(value)
}

// Handle fallback for non-fontface Browsers
font_family($family = $body-font-family, $spacing = $font-custom-spacing) {

    // Add font-family parameter only if its different than the body font-family
    if ($family != $body-font-family ) {
        font-family: $family
    }
    // Add custom parameters for custom fonts
    if ($family == $font-family-custom && $family != $body-font-family && $spacing) {
        letter-spacing: $spacing
    }
}

// Cursor prefixr
cursor(value) {
    // check if cursor is supported in most browsers
    // if not, add vendor prefixes
    $is-supported = true
    $unsupported-cursors = (grab grabbing)
    for $unsup in $unsupported-cursors {
        if (unquote(value) == unquote($unsup)) {
            $is-supported = false
            return false
        }
    }
    if (!$is-supported) {
        cursor: unquote('-webkit-'+value)
        cursor: unquote('-moz-'+value)
    }
    cursor: value
}

// =========================================================================
// PATH HANDLINGS
// =========================================================================

image-url($url = '', $imgbase = $dir_img) {
    if $url {
        return unquote('url(' + $imgbase + '/' + $url + ')')
    } else {
        return false
    }
}

font-url($url = '', $fontbase = $dir_font) {
    if $url {
        return unquote('url(' + $fontbase + '/' + $url + ')')
    } else {
        return false
    }
}



// =========================================================================
// @CSS classes
// =========================================================================


// Meta styles are a dependancy of the Javascript.
// Used to provide media query values for javascript components.
// Forward slash placed around everything to convince PhantomJS to read the value.

if $include-js-meta-styles {
    meta.foundation-version {
        font-family: '/{{VERSION}}/'
    }

    meta.foundation-mq-small {
        font-family: ('/' + unquote($small-up) + '/')
        width: $small-min
    }
    meta.foundation-mq-small-only {
        font-family: ('/' + unquote($small-only) + '/')
        width: $small-min
    }

    meta.foundation-mq-medium {
        font-family: ('/' + unquote($medium-up) + '/')
        width: $medium-min
    }
    meta.foundation-mq-medium-only {
        font-family: ('/' + unquote($medium-only) + '/')
        width: $medium-min
    }

    meta.foundation-mq-large {
        font-family: ('/' + unquote($large-up) + '/')
        width: $large-min
    }
    meta.foundation-mq-large-only {
        font-family: ('/' + unquote($large-only) + '/')
        width: $large-min
    }

    meta.foundation-mq-xlarge {
        font-family: ('/' + unquote($xlarge-up) + '/')
        width: $xlarge-min
    }
    meta.foundation-mq-xlarge-only {
        font-family: ('/' + unquote($xlarge-only) + '/')
        width: $xlarge-min
    }

    meta.foundation-mq-xxlarge {
        font-family: ('/' + unquote($xxlarge-up) + '/')
        width: $xxlarge-min
    }

    meta.foundation-data-attribute-namespace {
        font-family: $namespace
    }
}

if $include-html-global-classes {

    // Must be 100% for off canvas to work
    html,
    body {
        height: 100%
    }

    // Set box-sizing globally to handle padding and border widths
    *,
    *:before,
    *:after {
        box-sizing(border-box)
    }

    *:focus {
        outline: none
        box-shadow: $focus-shadow
    }


    html {
        font-size: $base-font-size
    }

    // Default body styles
    body {
        antialiased()
        background: $body-bg
        color: $body-font-color
        cursor: $cursor-auto-value
        font-size: fontsize($body-font-size)
        if ($base-font-size-sml != $body-font-size) {
            +mediaquery($small-only) {
                font-size: fontsize($base-font-size-sml)
            }
        }
        if ($base-font-size-lrg != $body-font-size) {
            +mediaquery($xlarge-up) {
                font-size: fontsize($base-font-size-lrg)
            }
        }
        font-style: $body-font-style
        font-weight: $body-font-weight
        font_family($body-font-family)
        line-height: $base-line-height // Set to $base-line-height to take on browser default of 150%
        margin: 0
        padding: 0
        position: relative
    }

    a:hover {
        cursor: $cursor-pointer-value
    }

    // Grid Defaults to get images and embeds to work properly
    img {
        max-width: 100%
        height: auto
    }

    img {
        -ms-interpolation-mode: bicubic
    }
    figure {
        margin: rem-calc(10)
    }

    #map_canvas,
    .map_canvas,
    .mqa-display {
        img,
        embed,
        object {
            max-width: none !important
        }
    }

    // Miscellaneous useful HTML classes
    .left {
        float: left !important
    }
    .right {
        float: right !important
    }
    .cf,
    .clearfix {
        clearfix()
    }
    .clear {
        clear: both
        
        &--left {
            clear: left
        }
        &--right {
            clear: right
        }
    }

    .no-break {
        white-space: nowrap !important
    }
    .break {
        white-space: normal !important
    }

    .block {
        display: block
    }
    .inlineblock {
        display: inline-block
    }
    .expand {
        expand()
    }

    .radius {
        radius($global-radius)

        &--top {
            side-radius(top, $global-radius)
        }
        &--bottom {
            side-radius(bottom, $global-radius)
        }
        &--{$default-float} {
            side-radius($default-float, $global-radius)
        }
        &--{$opposite-direction} {
            side-radius($opposite-direction, $global-radius)
        }
    }
    .round {
        radius($global-rounded)

        &--top {
            side-radius(top, $global-rounded)
        }
        &--bottom {
            side-radius(bottom, $global-rounded)
        }
        &--{$default-float} {
            side-radius($default-float, $global-rounded)
        }
        &--{$opposite-direction} {
            side-radius($opposite-direction, $global-rounded)
        }
    }

    // Fixed elements
    .fixed {
        position: fixed
        top: 0
        width: 100%
        z-index: $zindex-navbar-fixed
        {$default-float}: 0
    }

    // Hide visually and from screen readers
    .is-hidden,
    .hide {
        display: none !important
    }

    // Hide visually and from screen readers, but maintain layout
    .is-invisible,
    .invisible {
        line-height: 0
        visibility: hidden
    }

    // Font smoothing
    // Antialiased font smoothing works best for light text on a dark background.
    // Apply to single elements instead of globally to body.
    // Note this only applies to webkit-based desktop browsers and Firefox 25 (and later) on the Mac.
    .antialiased {
        antialiased()
    }

    // Blurred out elements or bgs
    .is-blurred {
        blur-filter()
        single-transition($property:filter, $speed:300ms)
    }
    .is-grayscale {
        filter-grayscale()
    }

    // Get rid of gap under images by making them display: inline-block; by default
    img {
        display: inline-block
        vertical-align: middle
    }

    //
    // Global resets for forms
    //

    // Make sure textarea takes on height automatically
    textarea {
        height: auto;
        min-height: 50px;
        resize: vertical
    }

    // Make select elements 100% width by default
    select {
        width: 100%
    }
}