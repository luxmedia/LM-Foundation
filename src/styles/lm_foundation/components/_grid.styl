// Foundation by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

@require '_global'

//
// @variables
//

$include-html-grid-classes =        com_css.GRID
$include-xl-html-grid-classes ?=     true

// DEPRECATED - max row width is defined by breakpoints!
$row-width ?=                        rem-calc(1140)

$total-columns ?=                    12
$column-gutter ?=                    rem-calc(20)

$last-child-float ?=                 $opposite-direction

//== Container sizes
//
//## Define the maximum width of `.row` for different screen sizes.

// Small screen / tablet
$row-width-tablet ?=             (rem-calc(720, $base-value:$browser-default-font-size) + $column-gutter)
//** For `$screen-med-min` and up.
$row-width-med ?=                 $row-width-tablet

// Medium screen / desktop
$row-width-desktop ?=            (rem-calc(940, $base-value:$browser-default-font-size) + $column-gutter)
//** For `$screen-lrg-min` and up.
$row-width-lrg ?=                 $row-width-desktop

// Large screen / wide desktop
$row-width-xlrg-desktop ?=      (rem-calc(1140, $base-value:$browser-default-font-size) + $column-gutter)
//** For `$screen-lrg-min` and up.
$row-width-xlrg ?=                 $row-width-xlrg-desktop

//
// Grid Functions
//

// @FUNCTION
// $colNumber - Found in settings file
// $totalColumns - Found in settings file
grid-calc($colNumber, $totalColumns) {
    $result = percentage(($colNumber / $totalColumns))
    if ($result == 0%) {
        $result = 0
    }
    return $result
}

//
// @mixins
//

// For creating container, nested, and collapsed rows.
//
//
// $behavior - Any special behavior for this row? Default: false. Options: nest, collapse, nest-collapse, false.
grid-row($behavior = false) {

    // use @include grid-row(nest) to include a nested row
    if ($behavior == nest) {
        margin: 0 (-($column-gutter / 2))
        max-width: none
        width: auto
    } else if ($behavior == collapse) {
        // use @include grid-row(collapse) to collapsed a container row margins
        margin: 0
        // max-width: $row-width
        // Define maximum page dimensions depending on breakpoint
        +mediaquery($small-up) {
            max-width: 96%
        }
        +mediaquery($medium-up) {
            max-width: $row-width-med
        }
        +mediaquery($large-up) {
            max-width: $row-width-lrg
        }
        +mediaquery($xlarge-up) {
            max-width: $row-width-xlrg
        }
        width: 100%
    } else if ($behavior == nest-collapse) {
        // use @include grid-row(nest-collapse) to collapse outer margins on a nested row
        margin: 0
        max-width: none
        width: auto
    } else {
        // use @include grid-row to use a container row
        margin-bottom: 0
        margin-top: 0
        margin-{$default-float}: auto
        margin-{$opposite-direction}: auto
        // max-width: $row-width
        // Define maximum page dimensions depending on breakpoint-px
        +mediaquery($small-up) {
            max-width: 96%
        }
        +mediaquery($medium-up) {
            max-width: $row-width-med
        }
        +mediaquery($large-up) {
            max-width: $row-width-lrg
        }
        +mediaquery($xlarge-up) {
            max-width: $row-width-xlrg
        }
        width: 100%

        // Clearfix for all rows
        clearfix()
    }

}

// Creates a column, should be used inside of a media query to control layouts
//
// $columns - The number of columns this should be
// $last-column - Is this the last column? Default: false.
// $center - Center these columns? Default: false.
// $offset - # of columns to offset. Default: false.
// $push - # of columns to push. Default: false.
// $pull - # of columns to pull. Default: false.
// $collapse - Get rid of gutter padding on column? Default: false.
// $float - Should this float? Default: true. Options: true, false, left, right.
grid-column( $columns = false, $last-column = false, $center = false, $offset = false, $push = false, $pull = false, $collapse = false, $collapse-side = false, $float = true, $position = false) {

    // If positioned for default .column, include relative position
    // push and pull require position set
    if ($position || $push || $pull) {
        position: relative
    }

    // If collapsed, get rid of gutter padding
    if $collapse {
        padding-left: 0
        padding-right: 0
    } else if ($collapse == false) {
        // Gutter padding whenever a column isn't set to collapse
        // (use $collapse:null to do nothing)        
        padding-left: ($column-gutter / 2)
        padding-right: ($column-gutter / 2)
    }

    // If a column number is given, calculate width
    if $columns {
        width: grid-calc($columns, $total-columns)
        if $last-column {
            float: $opposite-direction
        }
    }

    // Source Ordering, adds left/right depending on which you use.
    if $push {
        {$default-float}: grid-calc($push, $total-columns)
        {$opposite-direction}: auto
    }
    if $pull {
        {$opposite-direction}: grid-calc($pull, $total-columns)
        {$default-float}: auto
    }

    if $float {
        if ($float == left || $float == true) {
            float: $default-float
        } else if ($float == right) {
            float: $opposite-direction
        } else {
            float: none
        }
    }

    // If centered, get rid of float and add appropriate margins
    if $center {
        margin-{$default-float}: auto
        margin-{$opposite-direction}: auto
        float: none
    }
    
    if $offset {
        margin-{$default-float}: grid-calc($offset, $total-columns) !important
    }

    // Remove first and last column edge padding
    if $collapse-side {
        &:first-child {
            padding-left: 0
        }
        &:last-child {
            padding-right: 0
        }
    }

}

// Create presentational classes for grid
//
// $size - Name of class to use, i.e. "large" will generate .large-1, .large-2, etc.
grid-html-classes($size) {
    
    $size = unquote($size)

    for $i in 0..($total-columns - 1) {
        .{$size}-push-{$i} {            
            grid-column($push:$i, $collapse:null, $float:false)
        }
        .{$size}-pull-{$i} {
            grid-column($pull:$i, $collapse:null, $float:false)
        }
    }

    .col {
        grid-column($columns:false, $position:true)
    }


    for $i in 1..$total-columns {
        .{$size}-{$i} {            
            grid-column($columns:$i, $collapse:null, $float:false)
        }
    }

    for $i in 0..($total-columns - 1) {
        .{$size}-offset-{$i} {
            grid-column($offset:$i, $collapse:null, $float:false)
        }
    }
    .{$size}-reset-order {
        float: $default-float
        left: auto
        margin-{$default-float}: 0
        margin-{$opposite-direction}: 0
        right: auto
    }

    .col.{$size}-centered {
        grid-column($center:true, $collapse:null, $float:false)
    }

    .col.{$size}-uncentered {
        float: $default-float
        margin-{$default-float}: 0
        margin-{$opposite-direction}: 0
    }

    // Fighting [class*="col"] + [class*="col"]:last-child
    .col.{$size}-centered:last-child{
        float: none
    }

    // Fighting .column.<previous-size>-centered:last-child
    .col.{$size}-uncentered:last-child {
        float: $default-float
    }

    .col.{$size}-uncentered.opposite {
        float: $opposite-direction
    }


    .row {
        &.{$size}--collapse {
            > .col {
                grid-column($collapse:true, $float:false)
            }

            .row {
                margin-left: 0
                margin-right: 0
            }
        }
        &.{$size}--uncollapse {
            > .col {
               grid-column()
            }
        }
    }
}

//
// @styles
//

if $include-html-grid-classes {
    .row {
        grid-row()

        &--collapse,
        &--cllps {
            // collapse all columns
            > .col {
                grid-column($collapse:true, $float:false)
            }
            .row {
                margin-left: 0
                margin-right: 0
            }
            // collapse only side columns
            &--side {
                > .col {
                    grid-column($collapse-side:true)
                }
                .row {
                    margin-left: 0
                    margin-right: 0
                }
            }

        }

        .row {
            grid-row($behavior:nest)
            &--collapse,
            &--cllps {
                grid-row($behavior:nest-collapse)
            }
        }
    }

    .col {
        grid-column($columns:$total-columns)
        
        &.first {
            padding-{$default-float}: 0
        }
        &.last {
            padding-{$opposite-direction}: 0
        }

        & + &:last-child {
            float: $last-child-float
        }
        & + &.end {
            float: $default-float
        }
    }

    +mediaquery($small-up) {

        grid-html-classes(sml)

    }

    +mediaquery($medium-up) {

        grid-html-classes(med)

    }
    
    +mediaquery($large-up) {
        
        grid-html-classes(lrg)

    }
}
if $include-xl-html-grid-classes {
    +mediaquery($xlarge-up) {
        grid-html-classes(xlrg)
    }
    +mediaquery($xxlarge-up) {
        grid-html-classes(xxlrg)
    }
}