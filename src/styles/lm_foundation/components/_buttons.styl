// Foundation by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

@require '_global'
@require '_labels'

//
// @Variables
//

$include-html-button-classes =              com_css.BUTTONS

// if you watn to have only round or square buttons, you can define it here
$button-corner-style ?=                     'all' // else: 'normal' or 'radius' or 'round'

// build padding for buttons.
$button-tny ?=                               rem-calc(3)
$button-sml ?=                               rem-calc(4)
$button-med ?=                               rem-calc(6)
$button-lrg ?=                               rem-calc(8)

// the display property.
$button-display ?=                           inline-block
$button-margin-bottom ?=                     rem-calc(10)

// button text styles.
$button-font-family ?=                       $font-family-custom
$button-font-color ?=                        $white
$button-font-color-alt ?=                    $charcoal-1
$button-font-tny ?=                          fontsize(.8rem)
$button-font-sml ?=                          fontsize(.9rem)
$button-font-med ?=                          fontsize(1.1rem)
$button-font-lrg ?=                          fontsize(1.3rem)
$button-font-weight ?=                       $font-weight-bold
$button-font-align ?=                        center
$button-text-transform ?=                    uppercase
$button-letter-spacing ?=                    0

// various hover effects.
$button-function-factor ?=                   -(20%) // lightness adjustment

// button border and hover styles.
$button-border-width ?=                      1px
$button-border-style ?=                      solid
$button-bg-color ?=                          $primary-color
$button-bg-hover ?=                          scale-color($button-bg-color, $button-function-factor)
$button-border-color ?=                      color_alpha($black, .1)
$button-border-hover-color ?=                color_alpha($black, .1)

$button-outline-width ?=                     2px // else: false

$primary-2-button-bg-color ?=                $primary-2-color
$primary-2-button-bg-hover ?=                scale-color($primary-2-color, $button-function-factor)
$primary-2-button-border-color ?=            scale-color($primary-2-button-bg-hover, -(5%))
$secondary-button-bg-color ?=                $secondary-color
$secondary-button-bg-hover ?=                scale-color($secondary-color, $button-function-factor)
$secondary-button-border-color ?=            scale-color($secondary-button-bg-hover, -(5%))
$success-button-bg-color ?=                  $success-color
$success-button-bg-hover ?=                  scale-color($success-color, $button-function-factor)
$success-button-border-color ?=              scale-color($success-button-bg-hover, -(5%))
$info-button-bg-color ?=                     $info-color
$info-button-bg-hover ?=                     scale-color($info-color, $button-function-factor)
$info-button-border-color ?=                 scale-color($info-button-bg-hover, -(5%))
$alert-button-bg-color ?=                    $alert-color
$alert-button-bg-hover ?=                    scale-color($alert-color, $button-function-factor)
$alert-button-border-color ?=                scale-color($alert-button-bg-hover, -(5%))
$warning-button-bg-color ?=                  $warning-color
$warning-button-bg-hover ?=                  scale-color($warning-color, $button-function-factor)
$warning-button-border-color ?=              scale-color($warning-button-bg-hover, -(5%))

// set the default radius used throughout the core.
$button-radius ?=                            $global-radius
$button-round ?=                             $global-rounded

// set default opacity and cursor for disabled buttons.
$button-disabled-opacity ?=                  .7
$button-disabled-cursor ?=                   $cursor-disabled-value

$button-svg-padding ?=                       remify(.6rem)
$button-svg-scale-correction ?=              remify(.2rem) // is added to background-size value to make bg-icons a bit bigger


//
// @MIXIN
//
// We use this mixin to create a default button base.
//
// $style - Sets base styles. Can be set to false. Default: true.
// $display - Used to control display property. Default: $button-display || inline-block

button-base($style = true, $display = $button-display) {
    if $style {
        border-style: $button-border-style
        border-width: $button-border-width
        cursor: $cursor-pointer-value
        font_family($button-font-family)
        font-weight: $button-font-weight
        line-height: normal
        margin: 0 0 $button-margin-bottom
        position: relative
        text-decoration: none
        text-align: $button-font-align
        text-transform: $button-text-transform
                
        -webkit-appearance: none
        border-radius: 0
        
        // SVGs inside buttons
        background-position: right center

        // position icons inside of buttons
        > .i {
            margin-top: -(rem-calc(2))
        }
        
        label {
            display: inline-block
            margin: 0 rem-calc(5) 0 0
            padding: 0
            text-transform: uppercase
        }    
        label + span:not(.lbl) {
            font-size: $label-font-sizing
        }

        single-transition((background-color box-shadow))

    }
    if $display {
        display: $display
    }
}

// Flat Button style
button-flat($font-color = $primary-color, $bg-hover = $primary-color, $font-color-hover = $white){
    background-color: transparent
    border: none
    box-shadow: none
    color: $font-color
    &:hover,
    &:focus {
        color: $font-color-hover
        background-color: $bg-hover
        label {
            color: $font-color-hover
            opacity: .7
        }
        > .i {
            color: $font-color-hover
        }
    }

    &.is-disabled,
    &[disabled],
    &[disabled]:hover,
    &[disabled]:focus {
        background-color: transparent
    }

    &.btn--dropdown {
        svg-background($file:'arrows_down.svg', $shapes:('polyline' 'polygon'), $stroke: $font-color, $stroke-hover: $font-color-hover, $stroke-width: $svg-stroke-width-small)
    }
    
    label {
        color: darken($font-color, 25%)
    }

}

// @MIXIN
//
// We use this mixin to add button size styles
//
// $padding - Used to build padding for buttons Default: $button-med ||= rem-calc(12)
// $full-width - We can set $full-width:true to remove side padding extend width - Default: false

button-size($padding = $button-med, $full-width = false) {

    // We control which padding styles come through,
    // these can be turned off by setting $padding:false
    if ($padding != false && $padding != null) {
        padding-top: $padding
        padding-{$opposite-direction}: (3 * $padding)
        padding-bottom: ($padding + rem-calc(1))
        padding-{$default-float}: (3 * $padding)

        // We control the font-size based on mixin input.
        if ($padding == $button-med) {
            font-size: $button-font-med
            svg-background($size: $button-font-med)
        } else if ($padding == $button-tny) {
            font-size: $button-font-tny
            svg-background($size: $button-font-tny)
        } else if ($padding == $button-sml) {
            font-size: $button-font-sml
            svg-background($size: $button-font-sml)
        } else if ($padding == $button-lrg) {
            font-size: $button-font-lrg
            svg-background($size: $button-font-lrg)
        }

    }

    // We can set $full-width:true to remove side padding extend width.
    if $full-width {
        // We still need to check if $padding is set.
        if ($padding != false && $padding != null) {
            padding-top: $padding
            // padding-bottom: ($padding + rem-calc(1))
            padding-bottom: $padding
        } else if ($padding == false) {
            padding-top: 0
            padding-bottom: 0
        }
        // padding-left: $button-med
        // padding-right: $button-med
        width: 100%
    }
}

// @MIXIN
//
// Button hover and border colors

// @MIXIN
//
// Button color styles
//
// $bg - Background color. We can set $bg:false for a transparent background. Default: $primary-color.
// $radius - If true, set to button radius which is $button-radius || explicitly set radius amount in px (ex. $radius:10px). Default: true
// $disabled - We can set $disabled:true to create a disabled transparent button. Default: false
// $bg-hover - Button Hover Background Color. Default: $button-bg-hover
// $border-color - Button Border Color. Default: $button-border-color
button-style($bg = $button-bg-color, $radius = false, $disabled = false, $bg-hover = null, $outline = false, $border-color = null, $font-color = $button-font-color, $flat = false) {
    
    // We control which background styles are used,
    // these can be removed by setting $bg = false
    if $bg {

        if ($bg-hover == null && $bg-hover != transparent) {
            // $bg-hover = ($bg != $button-bg-color) ? $button-bg-hover : scale-color($bg, $button-function-factor)
            $bg-hover = scale-color($bg, $button-function-factor)
        }
        // if ($border-color == null || lightness($bg) == lightness($border-color)) {
        //     $border-color = scale-color($bg, $button-function-factor)
        // }
        if ($border-color == null) {
            $border-color = $bg
        }

        if $outline {
            background-color: transparent
            border-width: $outline
            color: $bg
        } else {
            // Control the text color for you based on the background color.
            if ($font-color == $button-font-color) {
                color: (lightness($bg) < 75%) ? $font-color : $button-font-color-alt
            } else {
                color: $font-color
            }
            
            background-color: $bg
            border-color: $border-color
        }

        &:hover,
        &:focus {
            border-color: $bg-hover
            if $outline {
                background-color: color_alpha($bg, .1)
                color: $bg-hover
                > .i {
                    color: $bg-hover
                }
            } else {
                background-color: $bg-hover
                // border-color: scale-color($border-color, ($button-function-factor - 5))
                if ($font-color == $button-font-color) {
                    color: (lightness($bg) < 75%) ? $font-color : scale-color($button-font-color-alt, $button-function-factor)
                    > .i {
                        color: (lightness($bg) < 75%) ? $font-color : scale-color($button-font-color-alt, $button-function-factor)
                    }
                } else {
                    color: scale-color($font-color, $button-function-factor)
                    > .i {
                        color: scale-color($font-color, $button-function-factor)
                    }
                }
            }
        }

        shadow-elevation('button')

    }

    // Flat Button style without shadows
    if $flat {
        button-flat()
    }

    // We can set $disabled:true to create a disabled transparent button.
    if $disabled {
        box-shadow: none
        cursor: $button-disabled-cursor
        opacity: $button-disabled-opacity

        &:hover,
        &:focus {
            background-color: $bg
        }
    }

    // We can control how much button radius is used.
    if ($radius == true) {
        radius($button-radius)
    } else if $radius {
        radius($radius)
    }

}

// @MIXIN
//
// We use this to quickly create buttons with a single mixin. As @jaredhardy puts it, "the kitchen sink mixin"
//
// $padding - Used to build padding for buttons Default: $button-med ||= rem-calc(12)
// $bg - Primary color set in settings file. Default: $button-bg.
// $radius - If true, set to button radius which is $global-radius || explicitly set radius amount in px (ex. $radius:10px). Default:false.
// $full-width - We can set $full-width:true to remove side padding extend width. Default:false.
// $disabled - We can set $disabled:true to create a disabled transparent button. Default:false.
// $is-prefix - Not used? Default:false.
// $bg-hover - Button Hover Color - Default null - see button-style mixin
// $border-color - Button Border Color - Default null - see button-style mixin
// $transition - We can control whether or not to include the background-color transition property - Default:true.
button-basic($padding = $button-med, $bg = $button-bg-color, $radius = false, $full-width = false, $disabled = false, $is-prefix = false, $bg-hover = null, $border-color = null, $transition = true, $flat-style = false) {
    button-base()
    button-size($padding, $full-width)
    button-style($bg, $radius, $disabled, $bg-hover, $border-color, $flat: $flat-style)

    if $transition {
        single-transition((background-color color box-shadow))
    }
}



//
// @styles
//
if $include-html-button-classes {

    // Default styles for .btn and buttons applied outside of media query
    button,
    .btn {
        button-base()
        button-size()

        // Set corner style for buttons
        if ($button-corner-style == 'radius') {
            button-style($radius:true)
        } else if ($button-corner-style == 'round') {
            button-style($radius:$button-round)
        } else {
            button-style()
        }

        antialiased()
    }

    .btn {

        // Outline button
        if $button-outline-width {
            &--outline {
                button-style($outline:$button-outline-width)
            }
        }

        // Color variants
        &--secondary {
            button-style($bg:$secondary-button-bg-color, $bg-hover:$secondary-button-bg-hover, $border-color:$secondary-button-border-color)
            &.btn--outline {
                button-style($bg:$secondary-button-bg-color, $outline:$button-outline-width)
            }
        }
        if $include-primary-2-color-styles {
            &--primary-2 {
                button-style($bg:$primary-2-button-bg-color, $bg-hover:$primary-2-button-bg-hover, $border-color:$primary-2-button-border-color)
                &.btn--outline {
                    button-style($bg:$primary-2-button-bg-color, $outline:$button-outline-width)
                }
            }
        }
        &--success {
            button-style($bg:$success-button-bg-color, $bg-hover:$success-button-bg-hover, $border-color:$success-button-border-color)
        }
        &--info {
            button-style($bg:$info-button-bg-color, $bg-hover:$info-button-bg-hover, $border-color:$info-button-border-color)
        }            
        &--warning {
            button-style($bg:$warning-button-bg-color, $bg-hover:$warning-button-bg-hover, $border-color:$warning-button-border-color, $font-color:$warning-font-color)
        }
        &--alert {
            button-style($bg:$alert-button-bg-color, $bg-hover:$alert-button-bg-hover, $border-color:$alert-button-border-color, $font-color:$critical-font-color)
        }

        // Labels inside of buttons
        .lbl {
            // line-height: .8
            top: -(rem-calc(2))
        }
        &:not(.btn--flat) .lbl,
        &:not(.btn--outline) .lbl {
            border-width: 0
        }

        // Sizes
        &--tny {
            button-size($padding: $button-tny)
        }
        &--sml {
            button-size($padding: $button-sml)
        }
        &--lrg {
            button-size($padding: $button-lrg)
        }
        &--exp {
            button-size($padding: null, $full-width: true)
        }
        &--tny .lbl,
        &--sml .lbl {
            top: 0
            padding: rem-calc(1 5 1)
        }

        // Alignment
        &--txtleft {
            text-align: left;
            text-indent: $button-med
        }
        &--txtright {
            text-align: right;
            padding-right: $button-med
        }
        
        // Corner Variants
        // NOTE: add additional btn corner variants only for 'all' button-corner-style.
        // Otherwise we dont need more corner styles to avoid design inconsistency and blown up code.
        if ($button-corner-style == 'all') {
            &--rad {
                button-style($bg:false, $radius:true)
            }
            &--rnd {
                button-style($bg:false, $radius:$button-round)
            }
        }

        // BG-Less button
        &--flat {
            button-flat()
        }

        // elevate button with more shadow
        &--floating {
            shadow-elevation('floatingbutton')
        }

        // Disabled state
        &.is-disabled,
        &[disabled] {

            box-shadow: none
            cursor: $button-disabled-cursor
            opacity: $button-disabled-opacity
            pointer-events: none

            // button-style($bg: $button-bg-color, $disabled:true, $bg-hover: $button-bg-hover, $border-color: $button-border-color)
        }
    }

    //firefox 2px fix
    button::-moz-focus-inner {
        border: 0
        padding: 0
    }

    +mediaquery($medium-up) {
        button,
        .btn {
            button-base($style:false, $display:inline-block)
            button-size($padding:false, $full-width:false)
        }
    }
}