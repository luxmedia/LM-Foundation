//
// @variables
//

// This is the default html and body font-size for the base rem value.
// NOTE: We set it to a 10px base to get cleaner rem-calc values.
// Later on we set the font-size with a custom mixin and normalization factor to get our final font size
$rem-base ?=                        10px
$rem-base-unitless ?=               strip-unit($rem-base)

// Marker for ie8 fallback styles
// NOTE: This marker is used for creation of the ie8 fallback css file
// this marker is set to "true" in the _ie8-flag.styl file, which we import in the stylus grunt task.
// So we can create a different dist file for ie8
$ie8 ?=                             false

percentage($value){
    if $value {
        return unit(($value * 100),'%')
    }
}

// The default font-size is set to 100% of the browser style sheet (usually 16px)
// for compatibility with browser-based text zoom or user-set defaults.

// Since the typical default browser font-size is 16px, that makes the calculation for grid size.
$browser-default-font-size ?=        16px
// If you want your base font-size to be different and not have it affect the grid breakpoints,
// set $rem-base to $base-font-size and make sure $base-font-size is a px value.
$base-font-size ?=                   unit(percentage($rem-base / $browser-default-font-size),'%') // reduce base font size from 16px to 14px
// this is the font size we like to achieve for the body and all its children
$ref-font-size ?=                    1.4rem
// this is just a dummy font size for the body. Within the font_size mixin we also add $font-size-normalization to it!!
$body-font-size ?=                   1rem
$body-font-size-sml ?=              ($body-font-size + .1)
$body-font-size-lrg ?=              ($body-font-size + .1)

// Normalization factor for all font sizes
$font-size-normalization ?=          ($ref-font-size - $body-font-size)
$rem-base-actual ?=                  ($rem-base + unit($font-size-normalization * 10,'px'))


// =========================================================================
// CUSTOM LUXMEDIA FUNCTIONS
// =========================================================================

// REM CALCULATIONS

// Normalize rem-size value according to rem-base font-size
normalize_rem(value) {
    if (unit(value) != 'px') {
        return (value + $font-size-normalization)
    }
}

// Convert unit to rems if unit is in pixels.
remify($value, $isPx = false, $refvalue = $rem-base) {

    if ($value == 'inherit' || $value == 'auto' || $value == 'none' || $value == 'cover' || $value == 'contain' || $value == 'smaller' || $value == 0 || $value == null) {
        $val = $value
    } else if ($value == 'hairline') {
        $val = '1px'
    } else if (unit($value) == 'px' || $isPx) {
        $val = (!$ie8 ? unit(($value / $refvalue), 'rem') : unit($value, 'px'))
    } else if ((unit($value) == 0 || unit($value) == null) && ($isPx == false)) {
        $val = (!$ie8 ? unit($value, 'rem') : round(unit($value, 'px')))
    } else if (unit($value) == 'rem') {
        $val = (!$ie8 ? unit($value, 'rem') : round(unit($value * $refvalue, 'px')))
    } else {
        $val = unit($value, unit($value))
    }
    return round($val,2)
}

// Convert unit to pixels if unit is in rem.
pxify($value) {
    if ($value == 'inherit' || $value == 'auto' || $value == 'none' || $value == 'cover' || $value == 'contain' || $value == 'smaller' || $value == 0 || $value == null) {
        return $value
    } else if ($value == 'hairline') {
        '1px'
    } else if (unit($value) == 'px') {
        return unit($value, unit($value))
    } else if (unit($value) == 'rem' || unit($value) == 'em' || unit($value) == 0 || unit($value) == null) {
        return round(unit($value*$rem-base, 'px'))
    } else {
        return unit($value, unit($value))
    }
}

// =========================================================================
// FONT MIXINS
// =========================================================================

// Return normalized (based on rem-base) font size value
fontsize(value) {
    if (value != 0 && value != null && value != inherit) {
        if (unit(value) != 'px') {
            return remify(normalize_rem(value))
        } else {
            return value
        }
    } else {
        return value
    }
}

/* ========================================================================= */
// COLOR CALCULATIONS
/* ========================================================================= */
// TODO: Negative values like -15% in settings not working !!!!
scale-color($color, $mod = 0) {
    $value = unit($mod,'') // strip unit from value
    if ($mod < 0) {
        return darken($color, unit($value,'%'))
    } else {
        return lighten($color, unit($value,'%'))
    }

}

// =========================================================================
// EOF - CUSTOM LUXMEDIA FUNCTIONS
// =========================================================================


/* ========================================================================= */
// RANGES IN ARRAYS
/* ========================================================================= */
// We use these functions to define ranges for various things, like media queries.
lower-bound($range){
    if (length($range) <= 0) {
        return 0
    } else {
        return $range[0]
    }
}

upper-bound($range) {
    $l = length($range)
    if ($l < 2) {
        return 999999999999
    } else {
        return $range[($l - 1)]
    }
}


/* ========================================================================= */
// STRIP UNIT
/* ========================================================================= */
// It strips the unit of measure and returns it
strip-unit($num) {
    if($num != null) { 
        // return ($num / ($num * 0 + 1))
        return unit($num, "")
    } else {
        return 0
    }
}

/* ========================================================================= */
// TEXT INPUT TYPES
/* ========================================================================= */
text-inputs( $types = all, $selector = 'input' ) {
    $return = ()
    $all-text-input-types = ('text' 'search' 'password' 'date' 'datetime' 'datetime-local' 'month' 'week' 'email' 'number' 'tel' 'time' 'url' 'color' 'textarea')

    if ($types == all) {
        $types = $all-text-input-types
    }

    for $type in $types {
        if ($type == 'textarea') {
            if ($selector == 'input') {
              push($return, unquote($type))
            } else {
                $_sel = $type + $selector
                push($return, unquote($_sel))
            }
        } else {
            $_sel = $selector + '[type="' + $type + '"]'
            push($return, unquote($_sel))
        }
    }
    return $return
}

/* ========================================================================= */
// ADD CUSTOM NAMESPACE FOR DATA-ATTRIBUTES
/* ========================================================================= */
data($attr) {
    if $namespace {
        return '[data-' + $namespace + '-' + $attr + ']'
    }

    return '[data-' + $attr + ']'
}

/* ========================================================================= */
// REM CALCULATIONS
/* ========================================================================= */


// REM CALC

// New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
// Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:
//
//   rem-calc(10 20 30px 40);
//
// Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets
//
//   rem-calc((10, 20, 30, 40px));
//
// Optionally call with a different base (eg: 8px) to calculate rem.
//
//   rem-calc(16px 32px 48px, 8px);
//
// If you require to comma separate your list
//
//   rem-calc((16px, 32px, 48), 8px);

rem-calc($values, $base-value = $rem-base) {
    $max = length($values)

    if ($max == 1) {
        return remify($values[0], $isPx:true, $refvalue:$base-value)
    }

    $remValues = ()
    for $i in 0..($max - 1) {
        push($remValues, remify($values[$i], $isPx:true, $refvalue:$base-value))
    }
    return $remValues
}

// $reffont = calculate em based on $rem-base-actual or $rem-base. Latter is 10px, the other 14px. Breakpoints need $rem-base-actual to work proberly!!!
em-calc($values, $reffont = $rem-base-actual) {
    $remValues = rem-calc($values, $base-value:$reffont)

    $max = length($remValues)

    if ($max == 1) {
        return unit($remValues[0], 'em')
    }

    $emValues = ()

    for $i in 0..($max - 1) {
        push($emValues, unit($remValues[$i],'em'))
    }
    return $emValues
}