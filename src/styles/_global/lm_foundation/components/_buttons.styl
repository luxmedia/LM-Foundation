// Foundation by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

@require "_global"


//
// @MIXIN
//
// We use this mixin to create a default button base.
//
// $style - Sets base styles. Can be set to false. Default: true.
// $display - Used to control display property. Default: $button-display || inline-block

button-base($style = true, $display = $button-display) {
    if $style {
        border-style: $button-border-style
        border-width: $button-border-width
        cursor: $cursor-pointer-value
        font_family($button-font-family)
        font-weight: $button-font-weight
        line-height: normal
        margin: 0 0 $button-margin-bottom
        position: relative
        text-decoration: none
        text-align: $button-font-align
        text-transform: $button-text-transform
        letter-spacing: $button-letter-spacing
        
        if $button-shadow {
            box-shadow: $button-shadow
        }
                
        -webkit-appearance: none
        border-radius: 0
        
        &:hover,
        &:focus {
            if $button-hover-shadow {
                box-shadow: $button-hover-shadow
            }
        }
        
        // SVGs inside buttons
        background-position: right center
        background-repeat: no-repeat
        svg {
            position: relative
            width: $w = (rem-calc(strip-unit($base-line-height/100) * $rem-base) + $button-svg-padding)
            height: $h = ($w - $button-svg-padding - 0.1)
            top: ($h/4)
            margin-right: -($w)
        }

    }
    if $display {
        display: $display
    }
}

// Flat Button style
button-flat($font-color = $gray-base){
    background-color: transparent
    border: none
    box-shadow: none
    color: $font-color
    &:hover,
    &:focus {
        // box-shadow: none
    }

}

// @MIXIN
//
// We use this mixin to add button size styles
//
// $padding - Used to build padding for buttons Default: $button-med ||= rem-calc(12)
// $full-width - We can set $full-width:true to remove side padding extend width - Default: false

button-size($padding = $button-med, $full-width = false) {

    // We control which padding styles come through,
    // these can be turned off by setting $padding:false
    if ($padding != false && $padding != null) {
        padding-top: $padding
        padding-{$opposite-direction}: ($padding * 2)
        padding-bottom: ($padding + rem-calc(1))
        padding-{$default-float}: ($padding * 2)

        // We control the font-size based on mixin input.
        if ($padding == $button-med) {
            font_size($button-font-med)
            svg-background($size:$button-font-med)
        } else if ($padding == $button-tny) {
            font_size($button-font-tny)
            svg-background($size:$button-font-tny)
        } else if ($padding == $button-sml) {
            font_size($button-font-sml)
            svg-background($size:$button-font-sml)
        } else if ($padding == $button-lrg) {
            font_size($button-font-lrg)
            svg-background($size:$button-font-lrg)

        }
    }

    // We can set $full-width:true to remove side padding extend width.
    if $full-width {
        // We still need to check if $padding is set.
        if ($padding != false && $padding != null) {
            padding-top: $padding
            // padding-bottom: ($padding + rem-calc(1))
            padding-bottom: $padding
        } else if ($padding == false) {
            padding-top:0
            padding-bottom:0
        }
        padding-right: 0
        padding-left: 0
        width: 100%
    }
}

// @MIXIN
//
// we use this mixin to create the button hover and border colors

// @MIXIN
//
// We use this mixin to add button color styles
//
// $bg - Primary color set in settings file. Default: $button-bg.
// $radius - If true, set to button radius which is $global-radius || explicitly set radius amount in px (ex. $radius:10px). Default: true
// $disabled - We can set $disabled:true to create a disabled transparent button. Default: false
// $bg-hover - Button Hover Background Color. Default: $button-bg-hover
// $border-color - Button Border Color. Default: $button-border-color
button-style($bg = $button-bg-color, $radius = false, $disabled = false, $bg-hover = null, $border-color = null, $font-color = $button-font-color, $flat = false) {
    
    // We control which background styles are used,
    // these can be removed by setting $bg = false
    if $bg {

        if ($bg-hover == null) {
            // $bg-hover = ($bg != $button-bg-color) ? $button-bg-hover : scale-color($bg, $button-function-factor)
            $bg-hover = darken($bg, $button-function-factor)
        }

        if ($border-color == null || lightness($bg) == lightness($border-color)) {
            // $border-color = ($bg != $button-bg-color) ? $button-border-color : scale-color($bg, $button-function-factor)
            $border-color = darken($bg, $button-function-factor)
        }

        // We control the text color for you based on the background color.
        if ($font-color == $button-font-color) {
            color: (lightness($bg) < 75%) ? $font-color : $button-font-color-alt
        } else {
            color: $font-color
        }
        
        background-color: $bg
        border-color: $border-color

        &:hover,
        &:focus {
            if ($font-color == $button-font-color) {
                color: $col = (lightness($bg) < 75%) ? $font-color : darken($button-font-color-alt, $button-function-factor)
            } else {
                color: darken($font-color, $button-function-factor)
            }
            background-color: $bg-hover
            // border-color: scale-color($border-color, $button-function-factor)
            border-color: darken($border-color, ($button-function-factor - 5))
        }

    }

    // Flat Button style without shadows
    if $flat {
        button-flat()
    }

    // We can set $disabled:true to create a disabled transparent button.
    if $disabled {
        cursor: $button-disabled-cursor
        opacity: $button-disabled-opacity
        box-shadow: none
        &:hover,
        &:focus {
            background-color: $bg
        }
    }

    // We can control how much button radius is used.
    if ($radius == true) {
        radius($button-radius)
    } else if $radius {
        radius($radius)
    }

}

// @MIXIN
//
// We use this to quickly create buttons with a single mixin. As @jaredhardy puts it, "the kitchen sink mixin"
//
// $padding - Used to build padding for buttons Default: $button-med ||= rem-calc(12)
// $bg - Primary color set in settings file. Default: $button-bg.
// $radius - If true, set to button radius which is $global-radius || explicitly set radius amount in px (ex. $radius:10px). Default:false.
// $full-width - We can set $full-width:true to remove side padding extend width. Default:false.
// $disabled - We can set $disabled:true to create a disabled transparent button. Default:false.
// $is-prefix - Not used? Default:false.
// $bg-hover - Button Hover Color - Default null - see button-style mixin
// $border-color - Button Border Color - Default null - see button-style mixin
// $transition - We can control whether or not to include the background-color transition property - Default:true.
button-basic($padding = $button-med, $bg = $button-bg-color, $radius = false, $full-width = false, $disabled = false, $is-prefix = false, $bg-hover = null, $border-color = null, $transition = true, $flat-style = false) {
    button-base()
    button-size($padding, $full-width)
    button-style($bg, $radius, $disabled, $bg-hover, $border-color, $flat:$flat-style)

    if $transition {
        single-transition(background-color)
        single-transition(color)
    }
}



// +exports("button") {
    if $include-html-button-classes {

        // Default styles applied outside of media query
        button,
        .btn {
            button-base()
            button-size()
            button-style()

            antialiased()
            
            single-transition(background-color)

            &--secondary {
                button-style($bg:$secondary-color, $bg-hover:$secondary-button-bg-hover, $border-color:$secondary-button-border-color)
            }
            &--success {
                button-style($bg:$success-color, $bg-hover:$success-button-bg-hover, $border-color:$success-button-border-color)
            }
            &--info {
                button-style($bg:$info-color, $bg-hover:$info-button-bg-hover, $border-color:$info-button-border-color)
            }            
            &--warning {
                button-style($bg:$warning-color, $bg-hover:$warning-button-bg-hover, $border-color:$warning-button-border-color, $font-color:$warning-font-color)
            }
            &--alert {
                button-style($bg:$alert-color, $bg-hover:$alert-button-bg-hover, $border-color:$alert-button-border-color, $font-color:$critical-font-color)
            }

            &--large {
                button-size($padding:$button-lrg)
            }
            &--small {
                button-size($padding:$button-sml)
            }
            &--tiny {
                button-size($padding:$button-tny)
            }
            &--expand {
                button-size($padding:null,$full-width:true)
            }

            &--left-align {
                text-align: left;
                text-indent: $button-med
            }
            &--right-align {
                text-align: right;
                padding-right: $button-med
            }
            
            &--radius {
                button-style($bg:false, $radius:true)
            }
            &--round {
                button-style($bg:false, $radius:$button-round)
            }

            &--flat {
                button-flat()
            }

            &--disabled,
            &[disabled] {
                button-style($bg:$button-bg-color, $disabled:true, $bg-hover:$button-bg-hover, $border-color:$button-border-color)
                
                &--secondary { 
                    button-style($bg:$secondary-color, $disabled:true, $bg-hover:$secondary-button-bg-hover, $border-color:$secondary-button-border-color)
                }
                &--success { 
                    button-style($bg:$success-color, $disabled:true, $bg-hover:$success-button-bg-hover, $border-color:$success-button-border-color)
                }
                &--info { 
                    button-style($bg:$info-color, $disabled:true, $bg-hover:$info-button-bg-hover, $border-color:$info-button-border-color)
                }
                &--warning { 
                    button-style($bg:$warning-color, $disabled:true, $bg-hover:$warning-button-bg-hover, $border-color:$warning-button-border-color)
                }
                &--alert {
                    button-style($bg:$alert-color, $disabled:true, $bg-hover:$alert-button-bg-hover, $border-color:$alert-button-border-color, $font-color:$critical-font-color) 
                }
            }

        }

        //firefox 2px fix
        button::-moz-focus-inner {
            border:0
            padding:0
        }

        @media $medium-up {
            button,
            .btn {
                button-base($style:false, $display:inline-block)
                button-size($padding:false, $full-width:false)
            }
        }
    }
// }