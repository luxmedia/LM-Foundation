// Foundation by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

@require "_global"


//
// @mixins
//
//
// NOTE: Make default max-width change between list and content types. Can add more width with classes, maybe .small, .medium, .large, etc.
// We use this to style the dropdown container element.
// $content-list - Sets list-style. Default: list. Options: [list, content]
// $triangle - Sets if dropdown has triangle. Default:true.
// $max-width - Default: $f-dropdown-max-width || 200px.
dropdown-container($content = list, $triangle = true, $max-width = $f-dropdown-max-width) {
    position: absolute
    left: -(9999px)
    list-style: $f-dropdown-list-style
    margin-{$default-float}: 0
    outline: none

    & > *:first-child {
        margin-top: 0
    }
    & > *:last-child {
        margin-bottom: 0
    }

    if ($content == list) {
        width: 100%
        max-height: $f-dropdown-max-height
        height: $f-dropdown-height
        background: $f-dropdown-bg
        border: $f-dropdown-border-style $f-dropdown-border-width $f-dropdown-border-color
        font_size($f-dropdown-font-size)
        z-index: $zindex-dropdown
    } else if ($content == content) {
        padding: $f-dropdown-content-padding
        width: 100%
        height: $f-dropdown-height
        max-height: $f-dropdown-max-height
        background: $f-dropdown-bg
        border: $f-dropdown-border-style $f-dropdown-border-width $f-dropdown-border-color
        font_size($f-dropdown-font-size)
        z-index: $zindex-dropdown
    }

    if ($triangle == bottom) {
        margin-top: $f-dropdown-margin-top

        &:before {
            css-triangle($f-dropdown-triangle-size, $f-dropdown-triangle-color, bottom)
            position: absolute
            top: -($f-dropdown-triangle-size * 2)
            {$default-float}: $f-dropdown-triangle-side-offset
            z-index: $zindex-dropdown
        }
        &:after {
            css-triangle($f-dropdown-triangle-size + 1, $f-dropdown-border-color, bottom)
            position: absolute
            top: -(($f-dropdown-triangle-size + 1) * 2)
            {$default-float}: ($f-dropdown-triangle-side-offset - 1)
            z-index: ($zindex-dropdown - 1)
        }

        &.right:before {
            {$default-float}: auto
            {$opposite-direction}: $f-dropdown-triangle-side-offset
        }
        &.right:after {
            {$default-float}: auto
            {$opposite-direction}: ($f-dropdown-triangle-side-offset - 1)
        }
    }

    if ($triangle == $default-float) {
        margin-top: 0
        margin-{$default-float}: $f-dropdown-margin-right

        &:before {
            css-triangle($f-dropdown-triangle-size, $f-dropdown-triangle-color, ($opposite-direction))
            position: absolute
            top: $f-dropdown-triangle-side-offset
            {$default-float}: -($f-dropdown-triangle-size * 2)
            z-index: $zindex-dropdown
        }
        &:after {
            css-triangle($f-dropdown-triangle-size + 1, $f-dropdown-border-color, ($opposite-direction))
            position: absolute
            top: $f-dropdown-triangle-side-offset - 1
            {$default-float}: -(($f-dropdown-triangle-size * 2) - 2)
            z-index: ($zindex-dropdown - 1)
        }

    }

    if ($triangle == $opposite-direction) {
        margin-top: 0
        margin-{$default-float}: -($f-dropdown-margin-right)

        &:before {
            css-triangle($f-dropdown-triangle-size, $f-dropdown-triangle-color, ($default-float))
            position: absolute
            top: $f-dropdown-triangle-side-offset
            {$opposite-direction}: -($f-dropdown-triangle-size * 2)
            {$default-float}: auto
            z-index: $zindex-dropdown
        }
        &:after {
            css-triangle($f-dropdown-triangle-size + 1, $f-dropdown-border-color, ($default-float))
            position: absolute
            top: ($f-dropdown-triangle-side-offset - 1)
            {$opposite-direction}: -(($f-dropdown-triangle-size * 2) - 2)
            {$default-float}: auto
            z-index: ($zindex-dropdown - 1)
        }

    }

    if ($triangle == top) {
        margin-top: -($f-dropdown-margin-bottom)
        margin-left: 0

        &:before {
            css-triangle($f-dropdown-triangle-size, $f-dropdown-triangle-color, top)
            position: absolute
            top: auto
            bottom: -($f-dropdown-triangle-size * 2)
            {$default-float}: $f-dropdown-triangle-side-offset
            {$opposite-direction}: auto
            z-index: $zindex-dropdown
        }
        &:after {
            css-triangle($f-dropdown-triangle-size + 1, $f-dropdown-border-color, top)
            position: absolute
            top: auto
            bottom: -(($f-dropdown-triangle-size * 2) - 2)
            {$default-float}: ($f-dropdown-triangle-side-offset - 1)
            {$opposite-direction}: auto
            z-index: ($zindex-dropdown - 1)
        }

    }

    if $max-width {
        max-width: $max-width
    } else {
        max-width: $f-dropdown-max-width
    }

}

// @MIXIN
//
// We use this to style the list elements or content inside the dropdown.

dropdown-style() {
    font_size($f-dropdown-font-size)
    
    line-height: $f-dropdown-line-height
    margin: 0
    cursor: $cursor-pointer-value

    &:hover,
    &:focus {
        background-color: $f-dropdown-list-hover-bg
        > a,
        > a:hover {
            color: $f-dropdown-font-color-hover
        }
    }

    &--radius {
        radius($f-dropdown-radius)
    }

    > a {
        display: block
        padding: $f-dropdown-list-padding
        color: $f-dropdown-font-color
        font_family($f-dropdown-font-family)
        font-weight: $f-dropdown-font-weight
        text-transform: uppercase
        
        &.is-active,
        &.is-selected {
            cursor: $cursor-default-value
            color: $f-dropdown-font-color-active
        }
    }
}

// +exports("dropdown") {
    if $include-html-dropdown-classes {

        /* Foundation Dropdowns */
        .f-dropdown {
            dropdown-container(list, bottom)

            &.drop--{$opposite-direction} {
                dropdown-container(list, $default-float)
            }

            &.drop--{$default-float} {
                dropdown-container(list, $opposite-direction)
            }

            &.drop--top {
                dropdown-container(list, top)
            }
            // max-width: none

            > li {
                dropdown-style()
            }

            // You can also put custom content in these dropdowns
            &.content {
                dropdown-container(content, $triangle:false)
            }

            // Sizes
            &--tiny    {
                max-width: 200px
            }
            &--small   {
                max-width: 300px
            }
            &--medium  {
                max-width: 500px
            }
            &--large   {
                max-width: 800px
            }
            &--mega    {
                width: 100%!important
                max-width: 100%!important

                &.is-open{
                    left: 0!important
                }
            }
        }

    }
// }