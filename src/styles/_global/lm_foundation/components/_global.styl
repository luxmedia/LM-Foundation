// Foundation by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

@require "../_functions"

//
// @variables
//

$namespace ?=                       false

// The $base-font-size is 100% while $base-line-height is 150%
$base-line-height ?=                 140% // 150%

// whether or not CSS classes come through in the gem files.
$include-html-classes ?=             true
$include-print-styles ?=             true
$include-html-global-classes ?=      $include-html-classes

// =========================================================================
// Folder
// =========================================================================

$base-http ?=                       'http://www.your-domain.com'

$base-path-src ?=                    './src'
$base-path-svg ?=                    $base-path-src+'/svg'
$base-path-dist ?=                   './dist'

$relative-paths ?=                   true


// =========================================================================
// b. Grid
// =========================================================================


// Foundation grid vars
$include-html-grid-classes ?=        $include-html-classes
$include-xl-html-grid-classes ?=     false

$row-width ?=                        rem-calc(1000)
$total-columns ?=                    12
$column-gutter ?=                    rem-calc(30)

$last-child-float ?=                 $opposite-direction


// =========================================================================
// c. Global
// =========================================================================

// define default font stacks
$font-family-sans-serif ?=           "Lucida Sans", Helvetica, Arial, sans-serif
$font-family-serif ?=                Georgia, Cambria, "Times New Roman", Times, serif
$font-family-monospace ?=            Consolas, "Menlo", "Liberation Mono", Courier, monospace
$font-family-headings ?=             $font-family-sans-serif
$font-family-custom ?=               $font-family-sans-serif
$font-family-custom-fallback ?=      $font-family-sans-serif
$font-custom-spacing ?=              1px

// define default font weights
$font-weight-normal ?=               normal
$font-weight-bold ?=                 bold

$white ?=                            #FFFFFF
$gray-lighter-1 ?=                   #FAFAFA
$gray-lighter-2 ?=                   #F9F9F9
$gray-lighter-3 ?=                   #F6F6F6
$gray-light-1 ?=                     #F5F5F5
$gray-light-2 ?=                     #EFEFEF
$gray-light-3 ?=                     #EEEEEE
$gray-medium-1 ?=                    #DDDDDD
$gray-medium-2 ?=                    #CCCCCC
$gray-base ?=                        #AAAAAA
$gray-dark-1 ?=                      #999999
$gray-dark-2 ?=                      #888888
$gray-dark-3 ?=                      #777777
$gray-darker-1 ?=                    #666666
$gray-darker-2 ?=                    #555555
$gray-darker-3 ?=                    #444444
$charcoal-1 ?=                       #333333
$charcoal-2 ?=                       #222222
$black ?=                            #111111

// We use these as default colors throughout
$primary-color ?=                    #d94343 // #008CBA
$secondary-color ?=                  #e7e7e7
$info-color ?=                       #62a7d9 // #a0d3e8
$success-color ?=                    #4fc497 // #43AC6A
$warning-color ?=                    #ffcd45 // #f08a24
$alert-color ?=                      #f09060 // #f04124
$critical-color ?=                   $alert-color

$warning-font-color ?=               #e45a5a // #f08a24
$critical-font-color ?=              #c52121 // #f04124

// various global styles
$body-bg ?=                          $white
$body-font-color ?=                  $charcoal-2
$body-font-family ?=                 $font-family-sans-serif
$body-font-weight ?=                 $font-weight-normal
$body-font-style ?=                  normal

// font-smoothing
$font-smoothing ?=                   antialiased

// focus shadow
$focus-shadow ?=                     0 0 10px $primary-color

// text direction settings
$text-direction ?=                   ltr
$opposite-direction ?=               right
$default-float ?=                    left
$last-child-float ?=                 $opposite-direction

// make sure border radius matches unless we want it different.
$global-radius ?=                    3px
$global-rounded ?=                   1000px
$global-blur-radius ?=               3px
$global-ui-shadow ?=                 1px 1px 1px rgba($black,0.2)

// inset shadow shiny edges and depressions.
$shiny-edge-size ?=                  0 1px 0
$shiny-edge-color ?=                 rgba($white, .5)
$shiny-edge-active-color ?=          rgba($black, .2)

// SVGs
$svg-stroke-width-tiny ?=            6 // Stroke width for linea svgs
$svg-stroke-width-small ?=           5
$svg-stroke-width-medium ?=          4
$svg-stroke-width-large ?=           3
$svg-icons-base-size ?=              rem-calc(16) // base icon size
$svg-scale-factor-uni ?=             0.2 // rem-based - is added to background-size value to make bg-icons a bit bigger
$svg-scale-factor-x ?=               2 // multiply the svg width with this factor to get a pseudo padding for better icon alignment
$svg-scale-factor-y ?=               1 // multiply the svg height with this factor to get a pseudo padding for better icon alignment

// =========================================================================
// d. Breakpoints for media queries
// =========================================================================
$small-range ?=                      (0em 40em)
$medium-range ?=                     (40.063em 64em)
$large-range ?=                      (64.063em 90em)
$xlarge-range ?=                     (90.063em 120em)
$xxlarge-range ?=                    (120.063em 99999999em)


$screen ?=                   "only screen"

$landscape ?=                $screen+" and (orientation: landscape)"
$portrait ?=                 $screen+" and (orientation: portrait)"

$small-up ?=                 $screen
$small-only ?=               $screen+" and (max-width:"+upper-bound($small-range)+")"

$medium-up ?=                $screen+" and (min-width:"+lower-bound($medium-range)+")"
$medium-only ?=              $screen+" and (min-width:"+lower-bound($medium-range)+") and (max-width:" + upper-bound($medium-range)+")"

$large-up ?=                 $screen+" and (min-width:"+lower-bound($large-range)+")"
$large-only ?=               $screen+" and (min-width:"+lower-bound($large-range)+") and (max-width:" + upper-bound($large-range)+")"

$xlarge-up ?=                $screen+" and (min-width:"+lower-bound($xlarge-range)+")"
$xlarge-only ?=              $screen+" and (min-width:"+lower-bound($xlarge-range)+") and (max-width:" + upper-bound($xlarge-range)+")"

$xxlarge-up ?=               $screen+" and (min-width:"+lower-bound($xxlarge-range)+")"
$xxlarge-only ?=             $screen+" and (min-width:"+lower-bound($xxlarge-range)+") and (max-width:" + upper-bound($xxlarge-range)+")"

// Legacy
$small ?=                            $medium-up
$medium ?=                           $medium-up
$large ?=                            $large-up

// We use this as cursors values for enabling the option of having custom cursors in the whole site's stylesheet
// https://developer.mozilla.org/en-US/docs/Web/CSS/cursor
$cursor-auto-value ?=                auto
$cursor-crosshair-value ?=           crosshair
$cursor-default-value ?=             default
$cursor-disabled-value ?=            not-allowed
$cursor-pointer-value ?=             pointer
$cursor-help-value ?=                help
$cursor-text-value ?=                text
$cursor-grab-value ?=               grab
$cursor-grabbing-value ?=           grabbing

// f. Browser Capabilities
// =========================================================================

// Check if browser is capable of (requires modernizr):
// fontface
$is-fontface-support ?=                  unquote("/html.fontface")
$is-no-fontface-support ?=               unquote("/html.no-fontface")
// svg
$is-svg-support ?=                       unquote("/html.svg")
$is-no-svg-support ?=                    unquote("/html.no-svg")
// rem
$is-remunit-support ?=                   unquote("/html.cssremunit")
$is-no-remunit-support ?=                unquote("/html.no-cssremunit")


// Z-INDEX
// =========================================================================
$zindex-topbar ?=                        99
$zindex-joyride-tip ?=                   101
$zindex-navbar ?=                        1000
$zindex-dropdown ?=                      1000
$zindex-popover ?=                       1060
$zindex-tooltip ?=                       1070
$zindex-navbar-fixed ?=                  1030
$zindex-modal ?=                         1040
$zindex-off-canvas-menu ?=               1001
$zindex-offcanvas ?=                     1050
$zindex-reveal ?=                        1060




//
// Global Foundation Mixins
//

// @mixins
//
// control border radius.
// $radius - Default: $global-radius || 4px
radius($radius = $global-radius) {
    if $radius {
        border-radius: $radius
    }
}

// create equal side border radius on elements.
// $side - Options: left, right, top, bottom
side-radius($side, $radius = $global-radius) {
    if ($side == left || $side == right) {
        -webkit-border-bottom-{$side}-radius: $radius
        -webkit-border-top-{$side}-radius: $radius
        border-bottom-{$side}-radius: $radius
        border-top-{$side}-radius: $radius
    } else {
        -webkit-{$side}-left-radius: $radius
        -webkit-{$side}-right-radius: $radius
        border-{$side}-left-radius: $radius
        border-{$side}-right-radius: $radius
    }
}

// control whether or not we have inset shadows edges.
// $active - Default: true, Options: false
inset-shadow($active = true) {
    box-shadow: $shiny-edge-size $shiny-edge-color inset;

    if $active { 
        &:active {
            box-shadow: $shiny-edge-size $shiny-edge-active-color inset; 
        }
    }
}

// Make item full width
expand() {
    display: block
    padding-left: 0
    padding-right: 0
    width: 100%
}

// CSS Blur filter
blur-filter($radius = $global-blur-radius) {
    if $radius {
        filter: blur($radius)
    }
}

// CSS grayscale filter
filter-grayscale($value = 100%, $reset = false) {
    if $value {        
        filter: grayscale($value)
        -webkit-filter: grayscale($value)
        -moz-filter: grayscale($value)
        -ms-filter: grayscale($value)
        -o-filter: grayscale($value)
        if $reset {
            filter: none
        }
    }
}

// Border parameters
border-longhand($width = 0, $style = solid, $color = transparent) {
    border-width: $width
    border-style: $style
    border-color: $color
}

// SVG backgrounds based on "svg-stylus" plugin
svg-background($path = $base-path-svg, $file = false, $properties = false, $shapes = all, $fill = none, $stroke = none, $fill-hover = none, $stroke-hover = false, $stroke-width = 0, $size = $svg-icons-base-size, $scale-x = $svg-scale-factor-x, $scale-y = $svg-scale-factor-y, $scale-uni = $svg-scale-factor-uni, $repeat = no-repeat, $position-x = $opposite-direction, $position-y = center) {
    // possible svg shapes
    // If your svg files feature <g> you could use this instead of "all"
    // "g" is the svg group selector which inherits its styling to all children
    $svg-shapes-all = ("path" "circle" "ellipse" "rect" "line" "polyline" "polygon" "text")

    if ($shapes == all) {
        $shapes = $svg-shapes-all
    }
    // placeholder for final params
    $svg-params-normal-state = ()
    $svg-params-hover-state = ()

    if ($file) {
        $path-to-file = ($path+'/'+$file)
        // set styles (normal and hover) for all possible shapes
        for $shape in $shapes {
            $params-normal = ($shape+" fill "+$fill+", "+$shape+" stroke "+$stroke+", "+$shape+" stroke-width "+$stroke-width)
            $params-hover = ($shape+" fill "+$fill-hover+", "+$shape+" stroke "+$stroke-hover+", "+$shape+" stroke-width "+$stroke-width)
            push($svg-params-normal-state, $params-normal)
            push($svg-params-hover-state, $params-hover)
        }

        // set background image
        if ($properties) {
            background-image: svgurl($path-to-file) svg($properties)
        } else {
            background-image: svgurl($path-to-file) svg(unquote(join(', ', $svg-params-normal-state)))
            // Additional Styling for Hover State
            if $stroke-hover {
                &:focus,
                &:hover {
                    background-image: svgurl($path-to-file) svg(unquote(join(', ', $svg-params-hover-state)))
                }
            }
        }
    }
    // sizing parameter
    if $size {
        $size = remify($size)
        background-size: ($size*$scale-x + $scale-uni) ($size*$scale-y + $scale-uni)
    }
    // position parameter
    if $position-x {
        background-position: $position-x $position-y
    }
    // repeat parameter
    if $repeat {
        background-repeat: $repeat
    }

}


// add transitions to elements
// $property - Default: all, Options: http://www.w3.org/TR/css3-transitions/#animatable-properties
// $speed - Default: 300ms
// $ease - Default:ease-out, Options: http://css-tricks.com/almanac/properties/t/transition-timing-function/
single-transition($property = all, $speed = 300ms, $ease = ease-out) {
    transition: unquote($property) $speed $ease
}

// add box-sizing across browser prefixes
box-sizing($type = border-box) {
    -webkit-box-sizing: $type // Android < 2.3, iOS < 4
    -moz-box-sizing: $type // Firefox < 29
    box-sizing: $type // Chrome, IE 8+, Opera, Safari 5.1
}

// create isosceles triangles
// $triangle-size - Used to set border-size. No default, set a px or em size.
// $triangle-color - Used to set border-color which makes up triangle. No default
// $triangle-direction - Used to determine which direction triangle points. Options: top, bottom, left, right
css-triangle($triangle-size, $triangle-color, $triangle-direction) {
    content: ""
    display: block
    width: 0
    height: 0
    border: inset $triangle-size
    if ($triangle-direction == top) {
        border-color: $triangle-color transparent transparent transparent
        border-top-style: solid
    }
    if ($triangle-direction == bottom) {
        border-color: transparent transparent $triangle-color transparent
        border-bottom-style: solid
    }
    if ($triangle-direction == left) {
        border-color: transparent transparent transparent $triangle-color
        border-left-style: solid
    }
    if ($triangle-direction == right) {
        border-color: transparent $triangle-color transparent transparent
        border-right-style: solid
    }
}

// create the icon with three lines aka the hamburger icon, the menu-icon or the navicon
// $width - Width of hamburger icon in rem
// $left - If false, icon will be centered horizontally || explicitly set value in rem
// $top - If false, icon will be centered vertically || explicitly set value in rem
// $thickness - thickness of lines in hamburger icon, set value in px
// $gap - spacing between the lines in hamburger icon, set value in px
// $color - icon color
// $hover-color - icon color during hover
// $offcanvas - Set to true of @include in offcanvas
hamburger($width, $left, $top, $thickness, $gap, $color, $hover-color, $offcanvas) {
    span::after {
        content: ""
        position: absolute
        display: block
        height: 0

        if $offcanvas {
            if $top {
                top: $top
            } else {
                top: 50%
                margin-top: -($width/2)
            }
            if $left {
                left: $left
            } else {
                left: (($tabbar-menu-icon-width - $width) / 2)
            }
        } else {
            top: 50%
            margin-top: -($width/2)
            {$opposite-direction}: $topbar-link-padding
        }

        box-shadow:
        0 0px 0 $thickness $color,
        0 $gap + $thickness 0 $thickness $color,
        0 (2 * $gap + 2*$thickness) 0 $thickness $color
        width: $width
    }
    span:hover:after {
        box-shadow:
        0 0px 0 $thickness $hover-color,
        0 $gap + $thickness 0 $thickness $hover-color,
        0 (2 * $gap + 2*$thickness) 0 $thickness $hover-color
    }
}

// clear floats
clearfix() {
    &:before, 
    &:after {
        content: " ";
        display: table
    }
    &:after {
        clear: both
    }
}

// Force smooth font rendering
antialiased() {
    -webkit-font-smoothing: antialiased
    -moz-osx-font-smoothing: grayscale
}

// add a glowing effect to block elements
// $selector - Used for selector state. Default: focus, Options: hover, active, visited
// $fade-time - Default: 300ms
// $glowing-effect-color - Default: fade-out($primary-color, .25)
block-glowing-effect($selector = focus, $fade-time = 300ms, $glowing-effect-color = fade-out($primary-color, .25)) {
    transition: box-shadow $fade-time, border-color $fade-time ease-in-out;

    &:{$selector} {
        box-shadow: 0 0 5px $glowing-effect-color;
        border-color: $glowing-effect-color;
    }
}

// translate elements in 2D
// $horizontal: Default: 0
// $vertical: Default: 0
translate2d($horizontal = 0, $vertical = 0) {
    transform: translate($horizontal,$vertical)
}

// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
element-invisible() {
    position: absolute !important
    height: 1px
    width: 1px
    overflow: hidden
    clip: rect(1px, 1px, 1px, 1px)
}

// Turns off the element-invisible effect.
element-invisible-off() {
    position: static !important
    height: auto
    width: auto
    overflow: visible
    clip: auto
}

// Set reading direction
if ($text-direction == ltr) {
    $default-float = left
    $opposite-direction = right
} else {
    $default-float = right
    $opposite-direction = left
}


// LUXMEDIA MOD
// =========================================================================
// FONT MIXINS
// =========================================================================


// Convert font-size and line-height to rem
font_size(value) {
    // add PX (or original value) as backup
    if (value != 0 && value != null && value != inherit) {
        if (unit(value) != 'px') {
            font-size: remify(value + $font-size-normalization)
        } else {
            font-size: value
        }
    } else {
        font-size: value
    }
}
// Handle fallback for non-fontface Browsers
font_family($family = $body-font-family, $spacing = $font-custom-spacing) {

    // Add custom parameters for custom fonts
    font-family: $family
    if ($family == $font-family-custom && $family != $body-font-family ) {
        letter-spacing: $spacing
    }
}

// Cursor prefixr
cursor(value) {
    // check if cursor is supported in most browsers
    // if not, add vendor prefixes
    $is-supported = true
    $unsupported-cursors = (grab grabbing)
    for $i in $unsupported-cursors {
        if (value == $i) {
            $is-supported = false
            return false
        }
    }
    if (!$is-supported) {
        cursor: unquote("-webkit-"+value)
        cursor: unquote("-moz-"+value)
    }
    cursor: value
}

// =========================================================================
// PATH HANDLINGS
// =========================================================================

image-url($url = "", $imgbase = $dir_img) {
    if $url {
        return unquote("url(" + $imgbase + $url + ")")
    } else {
        return false
    }
}

font-url($url = "", $fontbase = $dir_font) {
    if $url {
        return unquote("url(" + $fontbase + $url + ")")
    } else {
        return false
    }
}


// =========================================================================
// COLOR MIXINS
// =========================================================================
colorAlpha($property, $maincolor = black, $opacity = 0.75, $mix = white) {
    {$property}: blend(rgba($maincolor,$opacity), $mix);
    {$property}: rgba($maincolor, $opacity);
}



// =========================================================================
// @CSS classes
// =========================================================================


// +exports("global") {

    // Meta styles are included in all builds, as they are a dependancy of the Javascript.
    // Used to provide media query values for javascript components.
    // Forward slash placed around everything to convince PhantomJS to read the value.

    meta.foundation-version {
        font-family: "/{{VERSION}}/"
    }

    meta.foundation-mq-small {
        font-family: "/" + unquote($small-up) + "/"
        width: lower-bound($small-range)
    }
    meta.foundation-mq-small-only {
        font-family: "/" + unquote($small-only) + "/"
        width: lower-bound($small-range)
    }

    meta.foundation-mq-medium {
        font-family: "/" + unquote($medium-up) + "/"
        width: lower-bound($medium-range)
    }
    meta.foundation-mq-medium-only {
        font-family: "/" + unquote($medium-only) + "/"
        width: lower-bound($medium-range)
    }

    meta.foundation-mq-large {
        font-family: "/" + unquote($large-up) + "/"
        width: lower-bound($large-range)
    }
    meta.foundation-mq-large-only {
        font-family: "/" + unquote($large-only) + "/"
        width: lower-bound($large-range)
    }

    meta.foundation-mq-xlarge {
        font-family: "/" + unquote($xlarge-up) + "/"
        width: lower-bound($xlarge-range)
    }
    meta.foundation-mq-xlarge-only {
        font-family: "/" + unquote($xlarge-only) + "/"
        width: lower-bound($xlarge-range)
    }

    meta.foundation-mq-xxlarge {
        font-family: "/" + unquote($xxlarge-up) + "/"
        width: lower-bound($xxlarge-range)
    }

    meta.foundation-data-attribute-namespace {
        font-family: $namespace
    }

    if $include-html-global-classes {

        // Must be 100% for off canvas to work
        html,
        body {
            height: 100%
        }

        // Set box-sizing globally to handle padding and border widths
        *,
        *:before,
        *:after {
            box-sizing(border-box)
        }

        *:focus {
            outline: none
            box-shadow: $focus-shadow
        }

        html {
            font-size: $base-font-size
        }

        // Default body styles
        body {
            background: $body-bg
            color: $body-font-color
            padding: 0
            margin: 0
            font_family($body-font-family)
            font_size($body-font-size)
            font-weight: $body-font-weight
            font-style: $body-font-style
            line-height: $base-line-height // Set to $base-line-height to take on browser default of 150%
            position: relative
            cursor: $cursor-auto-value
            antialiased()
        }

        a:hover {
            cursor: $cursor-pointer-value
        }

        // Grid Defaults to get images and embeds to work properly
        img {
            max-width: 100%
            height: auto
        }

        img {
            -ms-interpolation-mode: bicubic
        }

        #map_canvas,
        .map_canvas {
            img,
            embed,
            object {
                max-width: none !important
            }
        }

        // Miscellaneous useful HTML classes
        .left {
            float: left !important
        }
        .right {
            float: right !important
        }
        .cf,
        .clearfix {
            clearfix()
        }
        .clear {
            clear: both
        }

        .no-break {
            white-space: no-break
        }
        .break {
            white-space: normal
        }

        .block {
            display: block
        }
        .expand {
            expand()
        }

        .radius {
            radius($global-radius)
        }

        // Hide visually and from screen readers
        .is-hidden,
        .hide {
            display: none !important
            visibility: hidden
        }

        // Hide visually and from screen readers, but maintain layout
        .is-invisible,
        .invisible {
            visibility: hidden
        }

        // Font smoothing
        // Antialiased font smoothing works best for light text on a dark background.
        // Apply to single elements instead of globally to body.
        // Note this only applies to webkit-based desktop browsers and Firefox 25 (and later) on the Mac.
        .antialiased {
            antialiased()
        }

        // Blurred out elements or bgs
        .is-blurred {
            single-transition(filter,$speed:500ms, $ease:ease)
            blur-filter()
        }
        .is-grayscale {
            filter-grayscale()
        }

        // Get rid of gap under images by making them display: inline-block; by default
        img {
            display: inline-block
            vertical-align: middle
        }

        //
        // Global resets for forms
        //

        // Make sure textarea takes on height automatically
        textarea {
            height: auto;
            min-height: 50px;
            resize: vertical
        }

        // Make select elements 100% width by default
        select {
            width: 100%
        }
    }
// }