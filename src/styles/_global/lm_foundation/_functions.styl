// =========================================================================
// CUSTOM LUXMEDIA FUNCTIONS
// =========================================================================

// REM CALCULATIONS

// Convert unit to rems if unit is in pixels.
remify($value, $isPx = false) {
    if ($value == 'inherit' || $value == 'auto' || $value == 'none' || $value == 'cover' || $value == 'contain' || $value == 'smaller' || $value == 0 || $value == null) {
        return $value
    } else if ($value == 'hairline') {
        return '1px'
    } else if (unit($value) == 'px' || $isPx) {
        return unit($value/$rem-base, 'rem')
    } else if ((unit($value) == 0 || unit($value) == null) && ($isPx == false)) {
        return unit($value, 'rem')
    } else {
        return unit($value, unit($value))
    }
}

// Convert unit to rems if unit is in pixels.
pxify($value) {
    if ($value == 'inherit' || $value == 'auto' || $value == 'none' || $value == 'cover' || $value == 'contain' || $value == 'smaller' || $value == 0 || $value == null) {
        return $value
    } else if ($value == 'hairline') {
        '1px'
    } else if (unit($value) == 'px') {
        return unit($value, unit($value))
    } else if (unit($value) == 'rem' || unit($value) == 'em' || unit($value) == 0 || unit($value) == null) {
        return round(unit($value*$rem-base, 'px'))
    } else {
        return unit($value, unit($value))
    }
}

/* ========================================================================= */
// COLOR CALCULATIONS
/* ========================================================================= */
// TODO: Negative values like -15% in settings not working !!!!
scale-color($color, $mod = 0) {
    $value = unit($mod,"") // strip unit from value
    if ($mod < 0) {
        return darken($color, unit($value,'%'))
    } else {
        return lighten($color, unit($value,'%'))
    }

}

percentage($value){
    if $value {
        return unit(($value * 100),"%")
    }
}
// =========================================================================
// EOF - CUSTOM LUXMEDIA FUNCTIONS
// =========================================================================

// Foundation by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

// IMPORT ONCE
// We use this to prevent styles from being loaded multiple times for compenents that rely on other components.
$modules = ()
exports($name) {
    //$module_index = index($modules, $name)
    $module_index = false
    for $m_index, $i in $modules {
        if ($name == $m_index) $module_index = true
    }
    if (($module_index == null) || ($module_index == false)) {
        push($modules, $name)
        //content: 'code'
        // Reference: http://learnboost.github.io/stylus/docs/mixins.html#block-mixins
        {block}
    }
}

// Based on Foundation by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

/* ========================================================================= */
// RANGES
/* ========================================================================= */
// We use these functions to define ranges for various things, like media queries.
lower-bound($range){
    if length($range) <= 0 {
        return 0;
    }
    return $range[0]
}

upper-bound($range) {
    if length($range) < 2 {
        return 999999999999;
    }
    return $range[1]
}


/* ========================================================================= */
// STRIP UNIT
/* ========================================================================= */
// It strips the unit of measure and returns it
strip-unit($num) {
    if($num != null) { 
        return ($num / ($num * 0 + 1))
    } else {
        return 0
    }
}

/* ========================================================================= */
// TEXT INPUT TYPES
/* ========================================================================= */
text-inputs( $types = all, $selector = "input" ) {
    $return = ()
    $all-text-input-types = ("text" "search" "password" "date" "datetime" "datetime-local" "month" "week" "email" "number" "tel" "time" "url" "color" "textarea")

    if ($types == all) {
        $types = $all-text-input-types
    }

    for $type in $types {
        if ($type == "textarea") {
            if ($selector == "input") {
              push($return, unquote($type))
            } else {
                $_sel = $type + $selector
                push($return, unquote($_sel))
            }
        } else {
            $_sel = $selector + '[type="' + $type + '"]'
            push($return, unquote($_sel))
        }
    }
    return $return
}

/* ========================================================================= */
// ADD CUSTOM NAMESPACE FOR DATA-ATTRIBUTES
/* ========================================================================= */
data($attr) {
    if $namespace {
        return '[data-' + $namespace + '-' + $attr + ']'
    }

    return '[data-' + $attr + ']'
}

/* ========================================================================= */
// REM CALCULATIONS
/* ========================================================================= */

// CONVERT REM
// @Deprecated - we use remify() instead
convert-to-rem($value, $base-value = $rem-base)  {
    $val = (strip-unit($value) / strip-unit($base-value) * 1rem)
    if ($val == 0rem) {
        // Turn 0rem into 0
        $val = 0
    }
    return $val
}

// REM CALC

// New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
// Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:
//
//   rem-calc(10 20 30px 40);
//
// Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets
//
//   rem-calc((10, 20, 30, 40px));
//
// Optionally call with a different base (eg: 8px) to calculate rem.
//
//   rem-calc(16px 32px 48px, 8px);
//
// If you require to comma separate your list
//
//   rem-calc((16px, 32px, 48), 8px);

rem-calc($values, $base-value = $rem-base) {
    $max = length($values)

    if ($max == 1) {
        // return convert-to-rem($values[0], $base-value)
        return remify($values[0],true)
    }

    $remValues = ()
    for $i in 0..$max {
        // push($remValues, convert-to-rem($values[$i], $base-value))
        push($remValues, remify($values[$i],true))
    }
    return $remValues
}