// Foundation by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

// IMPORT ONCE
// We use this to prevent styles from being loaded multiple times for compenents that rely on other components.
$modules = () !default
exports($name) {
	$module_index = index($modules, $name)
	if (($module_index == null) || ($module_index == false)) {
		push($modules, $name)
		//content: 'code'
	}
	// Reference: http://learnboost.github.io/stylus/docs/mixins.html
	//{block}
}

// Based on Foundation by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

/* ========================================================================= */
// RANGES
/* ========================================================================= */
// We use these functions to define ranges for various things, like media queries.
lower-bound($range){
	if length($range) <= 0 {
		return 0;
	}
	return $range[0]
}

upper-bound($range) {
	if length($range) < 2 {
		return 999999999999;
	}
	return $range[1]
}

/* ========================================================================= */
// COLOR CALCULATIONS
/* ========================================================================= */
scale-color($color, $mod = 0%) {
	$value = unit($mod,"") // strip unit from value
	if ($value < 0) {
		return darken($color, unit($value,'%'))
	} else {
		return lighten($color, unit($value,'%'))
	}

}

/* ========================================================================= */
// STRIP UNIT
/* ========================================================================= */
// It strips the unit of measure and returns it
strip-unit($num) {
	if($num != null) { 
		return $num / ($num * 0 + 1) 
	} else {
		return 0
	}
}

/* ========================================================================= */
// TEXT INPUT TYPES
/* ========================================================================= */
text-inputs( $types = all, $selector = input ) {
    $return = ()
    $all-text-input-types = (text password date datetime datetime-local month week email number search tel time url color textarea)

    if ($types == all) { $types = $all-text-input-types; }

    each $type in $types {
        if ($type == textarea) {
            if ($selector == input) {
              $return = push($return, unquote('{$type}'), comma)
            } else {
              $return = push($return, unquote('{$type}{$selector}'), comma)
            }
        } else {
            $return = push($return, unquote('{$selector}[type="{$type}"]'), comma)
        }
    }
    return $return
}

/* ========================================================================= */
// ADD CUSTOM NAMESPACE FOR DATA-ATTRIBUTES
/* ========================================================================= */
data($attr) {
	if $namespace {
		return '[data-' + $namespace + '-' + $attr + ']'
	}

	return '[data-' + $attr + ']'
}

/* ========================================================================= */
// REM CALCULATIONS
/* ========================================================================= */

// CONVERT REM
convert-to-rem($value, $base-value = $rem-base)  {
	$val = strip-unit($value) / strip-unit($base-value) * 1rem
	if ($val == 0rem) { $val = 0 } // Turn 0rem into 0
	return $val
}

// REM CALC

// New Syntax, allows to optionally calculate on a different base value to counter compounding effect of rem's.
// Call with 1, 2, 3 or 4 parameters, 'px' is not required but supported:
//
//   rem-calc(10 20 30px 40);
//
// Space delimited, if you want to delimit using comma's, wrap it in another pair of brackets
//
//   rem-calc((10, 20, 30, 40px));
//
// Optionally call with a different base (eg: 8px) to calculate rem.
//
//   rem-calc(16px 32px 48px, 8px);
//
// If you require to comma separate your list
//
//   rem-calc((16px, 32px, 48), 8px);

rem-calc($values, $base-value = $rem-base) {
	$max = length($values)

	if ($max == 1) { return convert-to-rem($values[1], $base-value) }

	$remValues = ()
	for $i in 1..$max {
		$remValues =  push($remValues, convert-to-rem($values[$i], $base-value))
	}
	return $remValues
}


/* Convert unit to rems if unit is in pixels. */
remify($value) {
	if ($value == 'inherit' || $value == 'auto' || $value == 'none' || $value == 'cover' || $value == 'contain' || $value == 'smaller' || $value == 0 || $value == null) {
		$value
	} else if ($value == 'hairline') {
		'1px'
	} else if (unit($value) == 'px') {
		unit($value/$font-size-base, 'rem')
	} else if (unit($value) == 0 || unit($value) == null) {
		unit($value, $base-unit)
	} else {
		unit($value, unit($value))
	}
}

/* Convert unit to rems if unit is in pixels. */
pxify($value) {
	if ($value == 'inherit' || $value == 'auto' || $value == 'none' || $value == 'cover' || $value == 'contain' || $value == 'smaller' || $value == 0 || $value == null) {
		$value
	} else if ($value == 'hairline') {
		'1px'
	} else if (unit($value) == 'px') {
		unit($value, unit($value))
	} else if (unit($value) == 'rem' || unit($value) == 'em' || unit($value) == 0 || unit($value) == null) {
		round(unit($value*$font-size-base, 'px'))
	} else {
		unit($value, unit($value))
	}
}