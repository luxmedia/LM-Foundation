// Foundation by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

@require "_global"


//
// @MIXIN
//
// We use this mixin to create a default button base.
//
// $style - Sets base styles. Can be set to false. Default: true.
// $display - Used to control display property. Default: $button-display || inline-block

button-base($style = true, $display = $button-display) {
	if $style {
		border-style: $button-border-style
		border-width: $button-border-width
		cursor: $cursor-pointer-value
		font-family: $button-font-family
		font-weight: $button-font-weight
		line-height: normal
		margin: 0 0 $button-margin-bottom
		position: relative
		text-decoration: none
		text-align: $button-font-align
		text-transform: $button-text-transform
		-webkit-appearance: none
		-webkit-border-radius:0
	}
	if $display {
		display: $display
	}
}

// @MIXIN
//
// We use this mixin to add button size styles
//
// $padding - Used to build padding for buttons Default: $button-med ||= rem-calc(12)
// $full-width - We can set $full-width:true to remove side padding extend width - Default: false

button-size($padding = $button-med, $full-width = false) {

	// We control which padding styles come through,
	// these can be turned off by setting $padding:false
	if $padding {
		padding-top: $padding
		padding-{$opposite-direction}: $padding * 2
		padding-bottom: $padding + rem-calc(1)
		padding-{$default-float}: $padding * 2

		// We control the font-size based on mixin input.
		if ($padding == $button-med) {
			font-size: $button-font-med
		} else if ($padding == $button-tny) {
			font-size: $button-font-tny
		} else if ($padding == $button-sml) {
			font-size: $button-font-sml
		} else if ($padding == $button-lrg) {
			font-size: $button-font-lrg
		}
	}

	// We can set $full-width:true to remove side padding extend width.
	if $full-width {
		// We still need to check if $padding is set.
		if $padding {
			padding-top: $padding
			padding-bottom: $padding + rem-calc(1)
		} else if ($padding == false) {
			padding-top:0
			padding-bottom:0
		}
		padding-right: 0
		padding-left: 0
		width: 100%
	}
}

// @MIXIN
//
// we use this mixin to create the button hover and border colors

// @MIXIN
//
// We use this mixin to add button color styles
//
// $bg - Primary color set in settings file. Default: $button-bg.
// $radius - If true, set to button radius which is $global-radius || explicitly set radius amount in px (ex. $radius:10px). Default: true
// $disabled - We can set $disabled:true to create a disabled transparent button. Default: false
// $bg-hover - Button Hover Background Color. Default: $button-bg-hover
// $border-color - Button Border Color. Default: $button-border-color
button-style($bg = $button-bg-color, $radius = false, $disabled = false, $bg-hover = null, $border-color = null) {
	
	// We control which background styles are used,
	// these can be removed by setting $bg = false
	if $bg {
		$lightness = $button-function-factor
		if ($bg-hover == null) {
			$bg-hover = ($bg != $button-bg-color) ? $button-bg-hover : scale-color($bg, $button-function-factor)
		}

		if ($border-color == null) {
			$border-color = ($bg != $button-bg-color) ? $button-border-color : scale-color($bg, $button-function-factor)
		}

		background-color: $bg
		border-color: $border-color
		&:hover,
		&:focus {
			background-color: $bg-hover
		}

		// We control the text color for you based on the background color.
		color: light($bg) ? $button-font-color : $button-font-color-alt

		&:hover,
		&:focus {
			color: light($bg-hover) ? $button-font-color : $button-font-color-alt
			
		}
	}

	// We can set $disabled:true to create a disabled transparent button.
	if $disabled {
		cursor: $button-disabled-cursor
		opacity: $button-disabled-opacity
		box-shadow: none
		&:hover,
		&:focus { background-color: $bg }
	}

	// We can control how much button radius is used.
	if ($radius == true) {
		radius($button-radius)
	} else if $radius {
		radius($radius)
	}

}

// @MIXIN
//
// We use this to quickly create buttons with a single mixin. As @jaredhardy puts it, "the kitchen sink mixin"
//
// $padding - Used to build padding for buttons Default: $button-med ||= rem-calc(12)
// $bg - Primary color set in settings file. Default: $button-bg.
// $radius - If true, set to button radius which is $global-radius || explicitly set radius amount in px (ex. $radius:10px). Default:false.
// $full-width - We can set $full-width:true to remove side padding extend width. Default:false.
// $disabled - We can set $disabled:true to create a disabled transparent button. Default:false.
// $is-prefix - Not used? Default:false.
// $bg-hover - Button Hover Color - Default null - see button-style mixin
// $border-color - Button Border Color - Default null - see button-style mixin
// $transition - We can control whether or not to include the background-color transition property - Default:true.
button($padding = $button-med, $bg = $button-bg-color, $radius = false, $full-width = false, $disabled = false, $is-prefix = false, $bg-hover = null, $border-color = null, $transition = true) {
	button-base()
	button-size($padding, $full-width)
	button-style($bg, $radius, $disabled, $bg-hover, $border-color)

	if $transition {
		single-transition(background-color)
	}
}


// +exports("button") {
	if $include-html-button-classes {

		// Default styles applied outside of media query
		button,
		.button {
			button-base()
			button-size()
			button-style()

			single-transition(background-color)

			&.secondary { 
				button-style(($bg = $secondary-color), ($bg-hover = $secondary-button-bg-hover), ($border-color = $secondary-button-border-color))
			}
			&.success { 
				button-style(($bg = $success-color), ($bg-hover = $success-button-bg-hover), ($border-color = $success-button-border-color))
			}
			&.alert { 
				button-style(($bg = $alert-color), ($bg-hover = $alert-button-bg-hover), ($border-color = $alert-button-border-color))
			}
			&.warning { 
				button-style(($bg = $warning-color), ($bg-hover = $warning-button-bg-hover), ($border-color = $warning-button-border-color))
			}
			&.info { 
				button-style(($bg = $info-color), ($bg-hover = $info-button-bg-hover), ($border-color = $info-button-border-color))
			}

			&.large { 
				button-size(($padding = $button-lrg))
			}
			&.small { 
				button-size(($padding = $button-sml))
			}
			&.tiny { 
				button-size(($padding = $button-tny))
			}
			&.expand { 
				button-size(($padding = null),($full-width = true))
			}

			&.left-align  {
				text-align: left;
				text-indent: rem-calc(12)
			}
			&.right-align {
				text-align: right;
				padding-right: rem-calc(12)
			}

			&.radius { 
				button-style(($bg = false), ($radius = true))
			}
			&.round  { 
				button-style(($bg = false), ($radius = $button-round))
			}

			&.disabled,
			&[disabled] {
				button-style(($bg = $button-bg-color), ($disabled = true), ($bg-hover = $button-bg-hover), ($border-color = $button-border-color))
				
				&.secondary { 
					button-style(($bg = $secondary-color), ($disabled = true), ($bg-hover = $secondary-button-bg-hover), ($border-color = $secondary-button-border-color))
				}
				&.success { 
					button-style(($bg = $success-color), ($disabled = true), ($bg-hover = $success-button-bg-hover), ($border-color = $success-button-border-color))
				}
				&.alert { 
					button-style(($bg = $alert-color), ($disabled = true), ($bg-hover = $alert-button-bg-hover), ($border-color = $alert-button-border-color))
				}
				&.warning { 
					button-style(($bg = $warning-color), ($disabled = true), ($bg-hover = $warning-button-bg-hover), ($border-color = $warning-button-border-color))
				}
				&.info { 
					button-style(($bg = $info-color), ($disabled = true), ($bg-hover = $info-button-bg-hover), ($border-color = $info-button-border-color))
				}
			}
		}

		//firefox 2px fix
		button::-moz-focus-inner {
			border:0
			padding:0
		}

		@media $medium-up {
			button,
			.button {
				button-base(($style = false), ($display = inline-block))
				button-size(($padding = false), ($full-width = false))
			}
		}
	}
// }